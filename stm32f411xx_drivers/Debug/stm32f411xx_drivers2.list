
stm32f411xx_drivers2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002838  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080029d8  080029d8  000129d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ad8  08002ad8  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08002ad8  08002ad8  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ad8  08002ad8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ad8  08002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002adc  08002adc  00012adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08002ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000088  08002b68  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08002b68  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e6f  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000560  00000000  00000000  00021f27  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001e0  00000000  00000000  00022488  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001a8  00000000  00000000  00022668  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000294f  00000000  00000000  00022810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001657  00000000  00000000  0002515f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000ab64  00000000  00000000  000267b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003131a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001218  00000000  00000000  00031398  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080029c0 	.word	0x080029c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	080029c0 	.word	0x080029c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <delay>:
#define MY_ADDR 0x61

#define SLAVE_ADDR  0x68

void delay(void)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e002      	b.n	80002a2 <delay+0x12>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3301      	adds	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <delay+0x28>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d9f8      	bls.n	800029c <delay+0xc>
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	0003d08f 	.word	0x0003d08f

080002bc <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80002c2:	4b10      	ldr	r3, [pc, #64]	; (8000304 <I2C1_GPIOInits+0x48>)
 80002c4:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002c6:	2302      	movs	r3, #2
 80002c8:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80002ca:	2301      	movs	r3, #1
 80002cc:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002ce:	2301      	movs	r3, #1
 80002d0:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80002d2:	2304      	movs	r3, #4
 80002d4:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002d6:	2302      	movs	r3, #2
 80002d8:	72bb      	strb	r3, [r7, #10]
	GPIO_PeriClockControl(GPIOB, ENABLE);
 80002da:	2101      	movs	r1, #1
 80002dc:	4809      	ldr	r0, [pc, #36]	; (8000304 <I2C1_GPIOInits+0x48>)
 80002de:	f000 f973 	bl	80005c8 <GPIO_PeriClockControl>
	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80002e2:	2306      	movs	r3, #6
 80002e4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 fa0d 	bl	8000708 <GPIO_Init>


	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80002ee:	2307      	movs	r3, #7
 80002f0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 fa07 	bl	8000708 <GPIO_Init>


}
 80002fa:	bf00      	nop
 80002fc:	3710      	adds	r7, #16
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40020400 	.word	0x40020400

08000308 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 800030c:	4b0b      	ldr	r3, [pc, #44]	; (800033c <I2C1_Inits+0x34>)
 800030e:	4a0c      	ldr	r2, [pc, #48]	; (8000340 <I2C1_Inits+0x38>)
 8000310:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000312:	4b0a      	ldr	r3, [pc, #40]	; (800033c <I2C1_Inits+0x34>)
 8000314:	2201      	movs	r2, #1
 8000316:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <I2C1_Inits+0x34>)
 800031a:	2261      	movs	r2, #97	; 0x61
 800031c:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800031e:	4b07      	ldr	r3, [pc, #28]	; (800033c <I2C1_Inits+0x34>)
 8000320:	2200      	movs	r2, #0
 8000322:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <I2C1_Inits+0x34>)
 8000326:	4a07      	ldr	r2, [pc, #28]	; (8000344 <I2C1_Inits+0x3c>)
 8000328:	605a      	str	r2, [r3, #4]
	I2C_PeriClockControl(I2C1, ENABLE);
 800032a:	2101      	movs	r1, #1
 800032c:	4804      	ldr	r0, [pc, #16]	; (8000340 <I2C1_Inits+0x38>)
 800032e:	f000 fc23 	bl	8000b78 <I2C_PeriClockControl>
	I2C_Init(&I2C1Handle);
 8000332:	4802      	ldr	r0, [pc, #8]	; (800033c <I2C1_Inits+0x34>)
 8000334:	f000 fcde 	bl	8000cf4 <I2C_Init>

}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000180 	.word	0x20000180
 8000340:	40005400 	.word	0x40005400
 8000344:	000186a0 	.word	0x000186a0

08000348 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <GPIO_ButtonInit+0x5c>)
 8000350:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000352:	2300      	movs	r3, #0
 8000354:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000356:	2300      	movs	r3, #0
 8000358:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800035a:	2302      	movs	r3, #2
 800035c:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800035e:	2300      	movs	r3, #0
 8000360:	74fb      	strb	r3, [r7, #19]
	GPIO_PeriClockControl(GPIOA,ENABLE);
 8000362:	2101      	movs	r1, #1
 8000364:	480f      	ldr	r0, [pc, #60]	; (80003a4 <GPIO_ButtonInit+0x5c>)
 8000366:	f000 f92f 	bl	80005c8 <GPIO_PeriClockControl>

	GPIO_Init(&GPIOBtn);
 800036a:	f107 030c 	add.w	r3, r7, #12
 800036e:	4618      	mov	r0, r3
 8000370:	f000 f9ca 	bl	8000708 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <GPIO_ButtonInit+0x60>)
 8000376:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000378:	230c      	movs	r3, #12
 800037a:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800037c:	2301      	movs	r3, #1
 800037e:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000380:	2302      	movs	r3, #2
 8000382:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000384:	2300      	movs	r3, #0
 8000386:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000388:	2301      	movs	r3, #1
 800038a:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 800038c:	2101      	movs	r1, #1
 800038e:	4806      	ldr	r0, [pc, #24]	; (80003a8 <GPIO_ButtonInit+0x60>)
 8000390:	f000 f91a 	bl	80005c8 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 8000394:	463b      	mov	r3, r7
 8000396:	4618      	mov	r0, r3
 8000398:	f000 f9b6 	bl	8000708 <GPIO_Init>

}
 800039c:	bf00      	nop
 800039e:	3718      	adds	r7, #24
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40020000 	.word	0x40020000
 80003a8:	40020c00 	.word	0x40020c00

080003ac <main>:


int main(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b08a      	sub	sp, #40	; 0x28
 80003b0:	af02      	add	r7, sp, #8
	GPIO_Handle_t GPIOHandle, GPIOLed;
	uint8_t commandcode = 0x51;
 80003b2:	2351      	movs	r3, #81	; 0x51
 80003b4:	71fb      	strb	r3, [r7, #7]
	uint8_t len;

	initialise_monitor_handles();
 80003b6:	f002 fa83 	bl	80028c0 <initialise_monitor_handles>
	//setbuf(stdout,NULL);
	printf("Application is running\n");
 80003ba:	483f      	ldr	r0, [pc, #252]	; (80004b8 <main+0x10c>)
 80003bc:	f001 f95a 	bl	8001674 <puts>
	GPIOLed.pGPIOx = GPIOD;
 80003c0:	4b3e      	ldr	r3, [pc, #248]	; (80004bc <main+0x110>)
 80003c2:	60bb      	str	r3, [r7, #8]
	GPIOHandle.pGPIOx = GPIOA;
 80003c4:	4b3e      	ldr	r3, [pc, #248]	; (80004c0 <main+0x114>)
 80003c6:	617b      	str	r3, [r7, #20]
	GPIO_ButtonInit();
 80003c8:	f7ff ffbe 	bl	8000348 <GPIO_ButtonInit>
	//I2C PINS INITS
	I2C1_GPIOInits();
 80003cc:	f7ff ff76 	bl	80002bc <I2C1_GPIOInits>
	//I2C PERIPEHRAL INITS
	I2C1_Inits();
 80003d0:	f7ff ff9a 	bl	8000308 <I2C1_Inits>

	//I2C IRQ Configurations
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 80003d4:	2101      	movs	r1, #1
 80003d6:	201f      	movs	r0, #31
 80003d8:	f000 fe18 	bl	800100c <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);
 80003dc:	2101      	movs	r1, #1
 80003de:	2020      	movs	r0, #32
 80003e0:	f000 fe14 	bl	800100c <I2C_IRQInterruptConfig>
	I2C_PeripheralControl(I2C1, ENABLE);
 80003e4:	2101      	movs	r1, #1
 80003e6:	4837      	ldr	r0, [pc, #220]	; (80004c4 <main+0x118>)
 80003e8:	f001 f86c 	bl	80014c4 <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1;
	I2C_ManageAcking(I2C1, ENABLE);
 80003ec:	2101      	movs	r1, #1
 80003ee:	4835      	ldr	r0, [pc, #212]	; (80004c4 <main+0x118>)
 80003f0:	f001 f884 	bl	80014fc <I2C_ManageAcking>
	//SEND DATA

	while(1)
		{
			//wait till button is pressed
			while( ! GPIO_ReadFromInputPin(&GPIOHandle,GPIO_PIN_NO_0) );
 80003f4:	bf00      	nop
 80003f6:	f107 0314 	add.w	r3, r7, #20
 80003fa:	2100      	movs	r1, #0
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 fb09 	bl	8000a14 <GPIO_ReadFromInputPin>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d0f6      	beq.n	80003f6 <main+0x4a>

			//to avoid button de-bouncing related issues 200ms of delay
			delay();
 8000408:	f7ff ff42 	bl	8000290 <delay>
			GPIO_ToggleOutputPin(&GPIOLed, GPIO_PIN_NO_12);
 800040c:	f107 0308 	add.w	r3, r7, #8
 8000410:	210c      	movs	r1, #12
 8000412:	4618      	mov	r0, r3
 8000414:	f000 fb15 	bl	8000a42 <GPIO_ToggleOutputPin>
			//send some data to the slave
			while(I2C_MasterSendDataIT(&I2C1Handle,&commandcode,1,SLAVE_ADDR, I2C_ENABLE_SR)!= I2C_READY);
 8000418:	bf00      	nop
 800041a:	1df9      	adds	r1, r7, #7
 800041c:	2301      	movs	r3, #1
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	2368      	movs	r3, #104	; 0x68
 8000422:	2201      	movs	r2, #1
 8000424:	4828      	ldr	r0, [pc, #160]	; (80004c8 <main+0x11c>)
 8000426:	f000 fd13 	bl	8000e50 <I2C_MasterSendDataIT>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1f4      	bne.n	800041a <main+0x6e>

			while(I2C_MasterReceiveDataIT(&I2C1Handle, &len, 1, SLAVE_ADDR, I2C_ENABLE_SR)!= I2C_READY);
 8000430:	bf00      	nop
 8000432:	1db9      	adds	r1, r7, #6
 8000434:	2301      	movs	r3, #1
 8000436:	9300      	str	r3, [sp, #0]
 8000438:	2368      	movs	r3, #104	; 0x68
 800043a:	2201      	movs	r2, #1
 800043c:	4822      	ldr	r0, [pc, #136]	; (80004c8 <main+0x11c>)
 800043e:	f000 fd4a 	bl	8000ed6 <I2C_MasterReceiveDataIT>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d1f4      	bne.n	8000432 <main+0x86>
			rxComplt = RESET;
 8000448:	4b20      	ldr	r3, [pc, #128]	; (80004cc <main+0x120>)
 800044a:	2200      	movs	r2, #0
 800044c:	701a      	strb	r2, [r3, #0]
			commandcode =0x52;
 800044e:	2352      	movs	r3, #82	; 0x52
 8000450:	71fb      	strb	r3, [r7, #7]
			while(I2C_MasterSendDataIT(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR)!= I2C_READY);
 8000452:	bf00      	nop
 8000454:	1df9      	adds	r1, r7, #7
 8000456:	2301      	movs	r3, #1
 8000458:	9300      	str	r3, [sp, #0]
 800045a:	2368      	movs	r3, #104	; 0x68
 800045c:	2201      	movs	r2, #1
 800045e:	481a      	ldr	r0, [pc, #104]	; (80004c8 <main+0x11c>)
 8000460:	f000 fcf6 	bl	8000e50 <I2C_MasterSendDataIT>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d1f4      	bne.n	8000454 <main+0xa8>

			while(I2C_MasterReceiveDataIT (&I2C1Handle, rcv_buffer, len, SLAVE_ADDR, I2C_DISABLE_SR)!= I2C_READY);
 800046a:	bf00      	nop
 800046c:	79ba      	ldrb	r2, [r7, #6]
 800046e:	2300      	movs	r3, #0
 8000470:	9300      	str	r3, [sp, #0]
 8000472:	2368      	movs	r3, #104	; 0x68
 8000474:	4916      	ldr	r1, [pc, #88]	; (80004d0 <main+0x124>)
 8000476:	4814      	ldr	r0, [pc, #80]	; (80004c8 <main+0x11c>)
 8000478:	f000 fd2d 	bl	8000ed6 <I2C_MasterReceiveDataIT>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d1f4      	bne.n	800046c <main+0xc0>
			GPIO_ToggleOutputPin(&GPIOLed, GPIO_PIN_NO_12);
 8000482:	f107 0308 	add.w	r3, r7, #8
 8000486:	210c      	movs	r1, #12
 8000488:	4618      	mov	r0, r3
 800048a:	f000 fada 	bl	8000a42 <GPIO_ToggleOutputPin>
			rxComplt = RESET;
 800048e:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <main+0x120>)
 8000490:	2200      	movs	r2, #0
 8000492:	701a      	strb	r2, [r3, #0]
			// wait until RX completes
			while(rxComplt != SET);
 8000494:	bf00      	nop
 8000496:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <main+0x120>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d1fb      	bne.n	8000496 <main+0xea>
			rcv_buffer[len+1] = '\0';
 800049e:	79bb      	ldrb	r3, [r7, #6]
 80004a0:	3301      	adds	r3, #1
 80004a2:	4a0b      	ldr	r2, [pc, #44]	; (80004d0 <main+0x124>)
 80004a4:	2100      	movs	r1, #0
 80004a6:	54d1      	strb	r1, [r2, r3]
			printf("%s", rcv_buffer);
 80004a8:	4909      	ldr	r1, [pc, #36]	; (80004d0 <main+0x124>)
 80004aa:	480a      	ldr	r0, [pc, #40]	; (80004d4 <main+0x128>)
 80004ac:	f001 f86e 	bl	800158c <iprintf>

			rxComplt = RESET;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <main+0x120>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	701a      	strb	r2, [r3, #0]
			while( ! GPIO_ReadFromInputPin(&GPIOHandle,GPIO_PIN_NO_0) );
 80004b6:	e79d      	b.n	80003f4 <main+0x48>
 80004b8:	080029d8 	.word	0x080029d8
 80004bc:	40020c00 	.word	0x40020c00
 80004c0:	40020000 	.word	0x40020000
 80004c4:	40005400 	.word	0x40005400
 80004c8:	20000180 	.word	0x20000180
 80004cc:	200000a4 	.word	0x200000a4
 80004d0:	20000160 	.word	0x20000160
 80004d4:	080029f0 	.word	0x080029f0

080004d8 <I2C1_EV_IRQHandler>:
		}
}


void	I2C1_EV_IRQHandler(void)           			/* I2C1 event interrupt                                               */
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 80004dc:	4802      	ldr	r0, [pc, #8]	; (80004e8 <I2C1_EV_IRQHandler+0x10>)
 80004de:	f000 fe6c 	bl	80011ba <I2C_EV_IRQHandling>
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000180 	.word	0x20000180

080004ec <I2C1_ER_IRQHandler>:
void	I2C1_ER_IRQHandler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
/* I2C1 error interrupt
                                   */
	I2C_ER_IRQHandling(&I2C1Handle);
 80004f0:	4802      	ldr	r0, [pc, #8]	; (80004fc <I2C1_ER_IRQHandler+0x10>)
 80004f2:	f000 ff61 	bl	80013b8 <I2C_ER_IRQHandling>
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000180 	.word	0x20000180

08000500 <I2C_ApplicationEventCallback>:

void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle,uint8_t AppEv)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	460b      	mov	r3, r1
 800050a:	70fb      	strb	r3, [r7, #3]
	if(AppEv == I2C_EV_TX_CMPLT){
 800050c:	78fb      	ldrb	r3, [r7, #3]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d103      	bne.n	800051a <I2C_ApplicationEventCallback+0x1a>
		printf("Tx complete\n");
 8000512:	4814      	ldr	r0, [pc, #80]	; (8000564 <I2C_ApplicationEventCallback+0x64>)
 8000514:	f001 f8ae 	bl	8001674 <puts>
		//hang in infinite loop
		while(1);

	}

}
 8000518:	e01f      	b.n	800055a <I2C_ApplicationEventCallback+0x5a>
	else if(AppEv == I2C_EV_RX_CMPLT)
 800051a:	78fb      	ldrb	r3, [r7, #3]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d106      	bne.n	800052e <I2C_ApplicationEventCallback+0x2e>
		printf("Rx is complete\n");
 8000520:	4811      	ldr	r0, [pc, #68]	; (8000568 <I2C_ApplicationEventCallback+0x68>)
 8000522:	f001 f8a7 	bl	8001674 <puts>
		rxComplt = SET;
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <I2C_ApplicationEventCallback+0x6c>)
 8000528:	2201      	movs	r2, #1
 800052a:	701a      	strb	r2, [r3, #0]
}
 800052c:	e015      	b.n	800055a <I2C_ApplicationEventCallback+0x5a>
	else if(AppEv == I2C_ERROR_AF)
 800052e:	78fb      	ldrb	r3, [r7, #3]
 8000530:	2b05      	cmp	r3, #5
 8000532:	d103      	bne.n	800053c <I2C_ApplicationEventCallback+0x3c>
		printf("Error: Ack failure\n");
 8000534:	480e      	ldr	r0, [pc, #56]	; (8000570 <I2C_ApplicationEventCallback+0x70>)
 8000536:	f001 f89d 	bl	8001674 <puts>
}
 800053a:	e00e      	b.n	800055a <I2C_ApplicationEventCallback+0x5a>
	else if(AppEv == I2C_ERROR_AF)
 800053c:	78fb      	ldrb	r3, [r7, #3]
 800053e:	2b05      	cmp	r3, #5
 8000540:	d10b      	bne.n	800055a <I2C_ApplicationEventCallback+0x5a>
		printf("Error: Ack failure\n");
 8000542:	480b      	ldr	r0, [pc, #44]	; (8000570 <I2C_ApplicationEventCallback+0x70>)
 8000544:	f001 f896 	bl	8001674 <puts>
		I2C_CloseSendData(pI2CHandle);
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f000 fd3c 	bl	8000fc6 <I2C_CloseSendData>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4618      	mov	r0, r3
 8000554:	f000 fac9 	bl	8000aea <I2C_GenerateStopCondition>
		while(1);
 8000558:	e7fe      	b.n	8000558 <I2C_ApplicationEventCallback+0x58>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	080029f4 	.word	0x080029f4
 8000568:	08002a00 	.word	0x08002a00
 800056c:	200000a4 	.word	0x200000a4
 8000570:	08002a10 	.word	0x08002a10

08000574 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000574:	480d      	ldr	r0, [pc, #52]	; (80005ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000576:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000578:	480d      	ldr	r0, [pc, #52]	; (80005b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800057a:	490e      	ldr	r1, [pc, #56]	; (80005b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800057c:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <LoopForever+0xe>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000580:	e002      	b.n	8000588 <LoopCopyDataInit>

08000582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000586:	3304      	adds	r3, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800058c:	d3f9      	bcc.n	8000582 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058e:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000590:	4c0b      	ldr	r4, [pc, #44]	; (80005c0 <LoopForever+0x16>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000594:	e001      	b.n	800059a <LoopFillZerobss>

08000596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000598:	3204      	adds	r2, #4

0800059a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800059c:	d3fb      	bcc.n	8000596 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800059e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80005a2:	f000 ffc7 	bl	8001534 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005a6:	f7ff ff01 	bl	80003ac <main>

080005aa <LoopForever>:

LoopForever:
    b LoopForever
 80005aa:	e7fe      	b.n	80005aa <LoopForever>
  ldr   r0, =_estack
 80005ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80005b8:	08002ae0 	.word	0x08002ae0
  ldr r2, =_sbss
 80005bc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80005c0:	200001ac 	.word	0x200001ac

080005c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c4:	e7fe      	b.n	80005c4 <ADC_IRQHandler>
	...

080005c8 <GPIO_PeriClockControl>:
  * @param  - GPIO_RegDef_t *pGPIOx handle on GPIO configuration.  uint8_t En_or_Di enable or disable byte.
  * @retval None
  * @note - .
  */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t En_or_Di)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
	if(En_or_Di == ENABLE)
 80005d4:	78fb      	ldrb	r3, [r7, #3]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d141      	bne.n	800065e <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx ==GPIOA)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a43      	ldr	r2, [pc, #268]	; (80006ec <GPIO_PeriClockControl+0x124>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d106      	bne.n	80005f0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80005e2:	4b43      	ldr	r3, [pc, #268]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a42      	ldr	r2, [pc, #264]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_PCLK_DI();
		}

	}
}
 80005ee:	e077      	b.n	80006e0 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx==GPIOB)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a40      	ldr	r2, [pc, #256]	; (80006f4 <GPIO_PeriClockControl+0x12c>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d106      	bne.n	8000606 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80005f8:	4b3d      	ldr	r3, [pc, #244]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fc:	4a3c      	ldr	r2, [pc, #240]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 80005fe:	f043 0302 	orr.w	r3, r3, #2
 8000602:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000604:	e06c      	b.n	80006e0 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx==GPIOC)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a3b      	ldr	r2, [pc, #236]	; (80006f8 <GPIO_PeriClockControl+0x130>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d106      	bne.n	800061c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800060e:	4b38      	ldr	r3, [pc, #224]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a37      	ldr	r2, [pc, #220]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
}
 800061a:	e061      	b.n	80006e0 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx==GPIOD)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a37      	ldr	r2, [pc, #220]	; (80006fc <GPIO_PeriClockControl+0x134>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d106      	bne.n	8000632 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000624:	4b32      	ldr	r3, [pc, #200]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000628:	4a31      	ldr	r2, [pc, #196]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 800062a:	f043 0308 	orr.w	r3, r3, #8
 800062e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000630:	e056      	b.n	80006e0 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx==GPIOE)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a32      	ldr	r2, [pc, #200]	; (8000700 <GPIO_PeriClockControl+0x138>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d106      	bne.n	8000648 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a2c      	ldr	r2, [pc, #176]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 8000640:	f043 0310 	orr.w	r3, r3, #16
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000646:	e04b      	b.n	80006e0 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx==GPIOH)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a2e      	ldr	r2, [pc, #184]	; (8000704 <GPIO_PeriClockControl+0x13c>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d147      	bne.n	80006e0 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	4a26      	ldr	r2, [pc, #152]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 8000656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800065a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800065c:	e040      	b.n	80006e0 <GPIO_PeriClockControl+0x118>
		if(pGPIOx ==GPIOA)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a22      	ldr	r2, [pc, #136]	; (80006ec <GPIO_PeriClockControl+0x124>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d106      	bne.n	8000674 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 8000666:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 800066c:	f023 0301 	bic.w	r3, r3, #1
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000672:	e035      	b.n	80006e0 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx==GPIOB)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a1f      	ldr	r2, [pc, #124]	; (80006f4 <GPIO_PeriClockControl+0x12c>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d106      	bne.n	800068a <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 800067c:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 800067e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000680:	4a1b      	ldr	r2, [pc, #108]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 8000682:	f023 0302 	bic.w	r3, r3, #2
 8000686:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000688:	e02a      	b.n	80006e0 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx==GPIOC)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a1a      	ldr	r2, [pc, #104]	; (80006f8 <GPIO_PeriClockControl+0x130>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d106      	bne.n	80006a0 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 8000698:	f023 0304 	bic.w	r3, r3, #4
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800069e:	e01f      	b.n	80006e0 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx==GPIOD)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a16      	ldr	r2, [pc, #88]	; (80006fc <GPIO_PeriClockControl+0x134>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d106      	bne.n	80006b6 <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ac:	4a10      	ldr	r2, [pc, #64]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 80006ae:	f023 0308 	bic.w	r3, r3, #8
 80006b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006b4:	e014      	b.n	80006e0 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx==GPIOE)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a11      	ldr	r2, [pc, #68]	; (8000700 <GPIO_PeriClockControl+0x138>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d106      	bne.n	80006cc <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a0b      	ldr	r2, [pc, #44]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 80006c4:	f023 0310 	bic.w	r3, r3, #16
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006ca:	e009      	b.n	80006e0 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx==GPIOH)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a0d      	ldr	r2, [pc, #52]	; (8000704 <GPIO_PeriClockControl+0x13c>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d105      	bne.n	80006e0 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 80006d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d8:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <GPIO_PeriClockControl+0x128>)
 80006da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	40020000 	.word	0x40020000
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020400 	.word	0x40020400
 80006f8:	40020800 	.word	0x40020800
 80006fc:	40020c00 	.word	0x40020c00
 8000700:	40021000 	.word	0x40021000
 8000704:	40021c00 	.word	0x40021c00

08000708 <GPIO_Init>:
  * @param  - GPIO_RegDef_t *pGPIOx handle on GPIO configuration.
  * @retval None
  * @note - .
  */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000708:	b480      	push	{r7}
 800070a:	b087      	sub	sp, #28
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	volatile uint32_t temp=0; //temp variable.
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
	//1. Configure the mode of gpio pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	795b      	ldrb	r3, [r3, #5]
 8000718:	2b03      	cmp	r3, #3
 800071a:	d821      	bhi.n	8000760 <GPIO_Init+0x58>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	795b      	ldrb	r3, [r3, #5]
 8000720:	461a      	mov	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	791b      	ldrb	r3, [r3, #4]
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	fa02 f303 	lsl.w	r3, r2, r3
 800072c:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER&= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clear bit
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	4619      	mov	r1, r3
 800073a:	2303      	movs	r3, #3
 800073c:	408b      	lsls	r3, r1
 800073e:	43db      	mvns	r3, r3
 8000740:	4619      	mov	r1, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	400a      	ands	r2, r1
 8000748:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER|=temp;
 800074a:	68f9      	ldr	r1, [r7, #12]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	430a      	orrs	r2, r1
 8000758:	601a      	str	r2, [r3, #0]
		temp=0;
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	e0a8      	b.n	80008b2 <GPIO_Init+0x1aa>
	}
	else
	{
		// TODO // //interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	795b      	ldrb	r3, [r3, #5]
 8000764:	2b04      	cmp	r3, #4
 8000766:	d117      	bne.n	8000798 <GPIO_Init+0x90>
		{
			// 1. CONFIGURE the FTSR

			EXTI->EXTI_FTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000768:	4ba1      	ldr	r3, [pc, #644]	; (80009f0 <GPIO_Init+0x2e8>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	7912      	ldrb	r2, [r2, #4]
 8000770:	4611      	mov	r1, r2
 8000772:	2201      	movs	r2, #1
 8000774:	408a      	lsls	r2, r1
 8000776:	4611      	mov	r1, r2
 8000778:	4a9d      	ldr	r2, [pc, #628]	; (80009f0 <GPIO_Init+0x2e8>)
 800077a:	430b      	orrs	r3, r1
 800077c:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800077e:	4b9c      	ldr	r3, [pc, #624]	; (80009f0 <GPIO_Init+0x2e8>)
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	7912      	ldrb	r2, [r2, #4]
 8000786:	4611      	mov	r1, r2
 8000788:	2201      	movs	r2, #1
 800078a:	408a      	lsls	r2, r1
 800078c:	43d2      	mvns	r2, r2
 800078e:	4611      	mov	r1, r2
 8000790:	4a97      	ldr	r2, [pc, #604]	; (80009f0 <GPIO_Init+0x2e8>)
 8000792:	400b      	ands	r3, r1
 8000794:	6093      	str	r3, [r2, #8]
 8000796:	e035      	b.n	8000804 <GPIO_Init+0xfc>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	795b      	ldrb	r3, [r3, #5]
 800079c:	2b05      	cmp	r3, #5
 800079e:	d117      	bne.n	80007d0 <GPIO_Init+0xc8>
		{
			//1. conffigure the RTSR

			EXTI->EXTI_RTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007a0:	4b93      	ldr	r3, [pc, #588]	; (80009f0 <GPIO_Init+0x2e8>)
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	7912      	ldrb	r2, [r2, #4]
 80007a8:	4611      	mov	r1, r2
 80007aa:	2201      	movs	r2, #1
 80007ac:	408a      	lsls	r2, r1
 80007ae:	4611      	mov	r1, r2
 80007b0:	4a8f      	ldr	r2, [pc, #572]	; (80009f0 <GPIO_Init+0x2e8>)
 80007b2:	430b      	orrs	r3, r1
 80007b4:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007b6:	4b8e      	ldr	r3, [pc, #568]	; (80009f0 <GPIO_Init+0x2e8>)
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	7912      	ldrb	r2, [r2, #4]
 80007be:	4611      	mov	r1, r2
 80007c0:	2201      	movs	r2, #1
 80007c2:	408a      	lsls	r2, r1
 80007c4:	43d2      	mvns	r2, r2
 80007c6:	4611      	mov	r1, r2
 80007c8:	4a89      	ldr	r2, [pc, #548]	; (80009f0 <GPIO_Init+0x2e8>)
 80007ca:	400b      	ands	r3, r1
 80007cc:	60d3      	str	r3, [r2, #12]
 80007ce:	e019      	b.n	8000804 <GPIO_Init+0xfc>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	795b      	ldrb	r3, [r3, #5]
 80007d4:	2b06      	cmp	r3, #6
 80007d6:	d115      	bne.n	8000804 <GPIO_Init+0xfc>
			//1. configure the FRTSR

			EXTI->EXTI_FTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007d8:	4b85      	ldr	r3, [pc, #532]	; (80009f0 <GPIO_Init+0x2e8>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	7912      	ldrb	r2, [r2, #4]
 80007e0:	4611      	mov	r1, r2
 80007e2:	2201      	movs	r2, #1
 80007e4:	408a      	lsls	r2, r1
 80007e6:	4611      	mov	r1, r2
 80007e8:	4a81      	ldr	r2, [pc, #516]	; (80009f0 <GPIO_Init+0x2e8>)
 80007ea:	430b      	orrs	r3, r1
 80007ec:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007ee:	4b80      	ldr	r3, [pc, #512]	; (80009f0 <GPIO_Init+0x2e8>)
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	7912      	ldrb	r2, [r2, #4]
 80007f6:	4611      	mov	r1, r2
 80007f8:	2201      	movs	r2, #1
 80007fa:	408a      	lsls	r2, r1
 80007fc:	4611      	mov	r1, r2
 80007fe:	4a7c      	ldr	r2, [pc, #496]	; (80009f0 <GPIO_Init+0x2e8>)
 8000800:	430b      	orrs	r3, r1
 8000802:	6093      	str	r3, [r2, #8]
		}
		//2. CONFIGURE THE gpio PORT SELECTION IN syscfg_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /4;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	791b      	ldrb	r3, [r3, #4]
 8000808:	089b      	lsrs	r3, r3, #2
 800080a:	75fb      	strb	r3, [r7, #23]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	791b      	ldrb	r3, [r3, #4]
 8000810:	f003 0303 	and.w	r3, r3, #3
 8000814:	75bb      	strb	r3, [r7, #22]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a76      	ldr	r2, [pc, #472]	; (80009f4 <GPIO_Init+0x2ec>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d024      	beq.n	800086a <GPIO_Init+0x162>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a74      	ldr	r2, [pc, #464]	; (80009f8 <GPIO_Init+0x2f0>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d01d      	beq.n	8000866 <GPIO_Init+0x15e>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a73      	ldr	r2, [pc, #460]	; (80009fc <GPIO_Init+0x2f4>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d016      	beq.n	8000862 <GPIO_Init+0x15a>
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a71      	ldr	r2, [pc, #452]	; (8000a00 <GPIO_Init+0x2f8>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d00f      	beq.n	800085e <GPIO_Init+0x156>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a70      	ldr	r2, [pc, #448]	; (8000a04 <GPIO_Init+0x2fc>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d008      	beq.n	800085a <GPIO_Init+0x152>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a6e      	ldr	r2, [pc, #440]	; (8000a08 <GPIO_Init+0x300>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d101      	bne.n	8000856 <GPIO_Init+0x14e>
 8000852:	2307      	movs	r3, #7
 8000854:	e00a      	b.n	800086c <GPIO_Init+0x164>
 8000856:	2300      	movs	r3, #0
 8000858:	e008      	b.n	800086c <GPIO_Init+0x164>
 800085a:	2304      	movs	r3, #4
 800085c:	e006      	b.n	800086c <GPIO_Init+0x164>
 800085e:	2303      	movs	r3, #3
 8000860:	e004      	b.n	800086c <GPIO_Init+0x164>
 8000862:	2302      	movs	r3, #2
 8000864:	e002      	b.n	800086c <GPIO_Init+0x164>
 8000866:	2301      	movs	r3, #1
 8000868:	e000      	b.n	800086c <GPIO_Init+0x164>
 800086a:	2300      	movs	r3, #0
 800086c:	757b      	strb	r3, [r7, #21]
		SYSCFG_PCLK_EN();
 800086e:	4b67      	ldr	r3, [pc, #412]	; (8000a0c <GPIO_Init+0x304>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a66      	ldr	r2, [pc, #408]	; (8000a0c <GPIO_Init+0x304>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->SYSCFG_EXTICR[temp1] |= portcode << (temp2 *4);
 800087a:	4a65      	ldr	r2, [pc, #404]	; (8000a10 <GPIO_Init+0x308>)
 800087c:	7dfb      	ldrb	r3, [r7, #23]
 800087e:	3302      	adds	r3, #2
 8000880:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000884:	7d79      	ldrb	r1, [r7, #21]
 8000886:	7dbb      	ldrb	r3, [r7, #22]
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	fa01 f303 	lsl.w	r3, r1, r3
 800088e:	4618      	mov	r0, r3
 8000890:	495f      	ldr	r1, [pc, #380]	; (8000a10 <GPIO_Init+0x308>)
 8000892:	7dfb      	ldrb	r3, [r7, #23]
 8000894:	4302      	orrs	r2, r0
 8000896:	3302      	adds	r3, #2
 8000898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3. enable the EXTI interrupt delivery using IMR
		EXTI->EXTI_IMR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800089c:	4b54      	ldr	r3, [pc, #336]	; (80009f0 <GPIO_Init+0x2e8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	7912      	ldrb	r2, [r2, #4]
 80008a4:	4611      	mov	r1, r2
 80008a6:	2201      	movs	r2, #1
 80008a8:	408a      	lsls	r2, r1
 80008aa:	4611      	mov	r1, r2
 80008ac:	4a50      	ldr	r2, [pc, #320]	; (80009f0 <GPIO_Init+0x2e8>)
 80008ae:	430b      	orrs	r3, r1
 80008b0:	6013      	str	r3, [r2, #0]
	}
	//2. configure the speed
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	799b      	ldrb	r3, [r3, #6]
 80008b6:	461a      	mov	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	791b      	ldrb	r3, [r3, #4]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->OSPEEDR&= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clear bit
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	689a      	ldr	r2, [r3, #8]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	791b      	ldrb	r3, [r3, #4]
 80008ce:	4619      	mov	r1, r3
 80008d0:	2303      	movs	r3, #3
 80008d2:	408b      	lsls	r3, r1
 80008d4:	43db      	mvns	r3, r3
 80008d6:	4619      	mov	r1, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	400a      	ands	r2, r1
 80008de:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR|=temp;
 80008e0:	68f9      	ldr	r1, [r7, #12]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	689a      	ldr	r2, [r3, #8]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	430a      	orrs	r2, r1
 80008ee:	609a      	str	r2, [r3, #8]
		temp=0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]


	//3. configure te pupd settings
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	79db      	ldrb	r3, [r3, #7]
 80008f8:	461a      	mov	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	791b      	ldrb	r3, [r3, #4]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->PUPDR&= ~(0x3 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clear bit
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	68da      	ldr	r2, [r3, #12]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	791b      	ldrb	r3, [r3, #4]
 8000910:	4619      	mov	r1, r3
 8000912:	2303      	movs	r3, #3
 8000914:	408b      	lsls	r3, r1
 8000916:	43db      	mvns	r3, r3
 8000918:	4619      	mov	r1, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	400a      	ands	r2, r1
 8000920:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR= (uint32_t)((pGPIOHandle->pGPIOx->PUPDR) | temp);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	68d9      	ldr	r1, [r3, #12]
 8000928:	68fa      	ldr	r2, [r7, #12]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	430a      	orrs	r2, r1
 8000930:	60da      	str	r2, [r3, #12]
		temp=0;
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
	//4. configure the optype
		temp  = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	7a1b      	ldrb	r3, [r3, #8]
 800093a:	461a      	mov	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	791b      	ldrb	r3, [r3, #4]
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->OTYPER&= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clear bit
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	685a      	ldr	r2, [r3, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	791b      	ldrb	r3, [r3, #4]
 8000950:	4619      	mov	r1, r3
 8000952:	2301      	movs	r3, #1
 8000954:	408b      	lsls	r3, r1
 8000956:	43db      	mvns	r3, r3
 8000958:	4619      	mov	r1, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	400a      	ands	r2, r1
 8000960:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER|=temp;
 8000962:	68f9      	ldr	r1, [r7, #12]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	685a      	ldr	r2, [r3, #4]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	430a      	orrs	r2, r1
 8000970:	605a      	str	r2, [r3, #4]

		temp =0;
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
	//5. configure the alt functionality
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	795b      	ldrb	r3, [r3, #5]
 800097a:	2b02      	cmp	r3, #2
 800097c:	d131      	bne.n	80009e2 <GPIO_Init+0x2da>
		{
			uint8_t temp1, temp2;
			temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	791b      	ldrb	r3, [r3, #4]
 8000982:	08db      	lsrs	r3, r3, #3
 8000984:	753b      	strb	r3, [r7, #20]
			temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	791b      	ldrb	r3, [r3, #4]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	74fb      	strb	r3, [r7, #19]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~((uint8_t)0xF<<( 4 * temp2) ); //clearing
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	7d3a      	ldrb	r2, [r7, #20]
 8000996:	3208      	adds	r2, #8
 8000998:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800099c:	7cfb      	ldrb	r3, [r7, #19]
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	220f      	movs	r2, #15
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43db      	mvns	r3, r3
 80009a8:	4618      	mov	r0, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	7d3a      	ldrb	r2, [r7, #20]
 80009b0:	4001      	ands	r1, r0
 80009b2:	3208      	adds	r2, #8
 80009b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle -> GPIO_PinConfig.GPIO_PinAltFunMode <<( 4 * temp2) );
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	7d3a      	ldrb	r2, [r7, #20]
 80009be:	3208      	adds	r2, #8
 80009c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	7a5b      	ldrb	r3, [r3, #9]
 80009c8:	461a      	mov	r2, r3
 80009ca:	7cfb      	ldrb	r3, [r7, #19]
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	7d3a      	ldrb	r2, [r7, #20]
 80009da:	4301      	orrs	r1, r0
 80009dc:	3208      	adds	r2, #8
 80009de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		}

}
 80009e2:	bf00      	nop
 80009e4:	371c      	adds	r7, #28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40013c00 	.word	0x40013c00
 80009f4:	40020000 	.word	0x40020000
 80009f8:	40020400 	.word	0x40020400
 80009fc:	40020800 	.word	0x40020800
 8000a00:	40020c00 	.word	0x40020c00
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40021c00 	.word	0x40021c00
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40013800 	.word	0x40013800

08000a14 <GPIO_ReadFromInputPin>:
}


	// Data read and write
uint8_t GPIO_ReadFromInputPin(GPIO_Handle_t *pGPIOHandle, uint8_t PinNumber)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOHandle->pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	691a      	ldr	r2, [r3, #16]
 8000a26:	78fb      	ldrb	r3, [r7, #3]
 8000a28:	fa22 f303 	lsr.w	r3, r2, r3
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	73fb      	strb	r3, [r7, #15]
	return value;
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <GPIO_ToggleOutputPin>:
void GPIO_WriteToOutputPort(GPIO_Handle_t *pGPIOHandle, uint16_t Value)
{
	pGPIOHandle->pGPIOx->ODR |= Value;
}
void GPIO_ToggleOutputPin(GPIO_Handle_t *pGPIOHandle, uint8_t PinNumber)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	70fb      	strb	r3, [r7, #3]
	pGPIOHandle->pGPIOx->ODR ^= (1<< PinNumber);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	695a      	ldr	r2, [r3, #20]
 8000a54:	78fb      	ldrb	r3, [r7, #3]
 8000a56:	2101      	movs	r1, #1
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	404a      	eors	r2, r1
 8000a64:	615a      	str	r2, [r3, #20]
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <I2C_GenerateStartCondition>:




static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
	pI2Cx->I2C_CR1 |= (1 <<I2C_CR1_START);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	601a      	str	r2, [r3, #0]
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr <<1;
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);
 8000aa4:	78fb      	ldrb	r3, [r7, #3]
 8000aa6:	f023 0301 	bic.w	r3, r3, #1
 8000aaa:	70fb      	strb	r3, [r7, #3]
	pI2Cx->I2C_DR = SlaveAddr;
 8000aac:	78fa      	ldrb	r2, [r7, #3]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	611a      	str	r2, [r3, #16]
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <I2C_ExecuteAddressPhaseRead>:
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr <<1;
 8000aca:	78fb      	ldrb	r3, [r7, #3]
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= (1);
 8000ad0:	78fb      	ldrb	r3, [r7, #3]
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	70fb      	strb	r3, [r7, #3]
	pI2Cx->I2C_DR = SlaveAddr;
 8000ad8:	78fa      	ldrb	r2, [r7, #3]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	611a      	str	r2, [r3, #16]
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <I2C_GenerateStopCondition>:
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
	pI2Cx->I2C_CR1 |= ( 1<< I2C_CR1_STOP);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	601a      	str	r2, [r3, #0]
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <I2C_ClearADDRFlag>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b084      	sub	sp, #16
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	//check for dev mode
	if(pI2CHandle->pI2Cx->I2C_SR2 & ( 1<< I2C_SR2_MSL))
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d01f      	beq.n	8000b60 <I2C_ClearADDRFlag+0x56>
	{
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	7f1b      	ldrb	r3, [r3, #28]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d112      	bne.n	8000b4e <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize==1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a1b      	ldr	r3, [r3, #32]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d11f      	bne.n	8000b70 <I2C_ClearADDRFlag+0x66>
			{
				//disable ACK
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 fce0 	bl	80014fc <I2C_ManageAcking>
				dummyRead = pI2CHandle->pI2Cx->I2C_SR1;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->I2C_SR2;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->I2C_SR1;
		dummyRead = pI2CHandle->pI2Cx->I2C_SR2;
		(void)dummyRead;

	}
}
 8000b4c:	e010      	b.n	8000b70 <I2C_ClearADDRFlag+0x66>
			dummyRead = pI2CHandle->pI2Cx->I2C_SR1;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->I2C_SR2;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	60fb      	str	r3, [r7, #12]
}
 8000b5e:	e007      	b.n	8000b70 <I2C_ClearADDRFlag+0x66>
		dummyRead = pI2CHandle->pI2Cx->I2C_SR1;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->I2C_SR2;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	60fb      	str	r3, [r7, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <I2C_PeriClockControl>:
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d120      	bne.n	8000bcc <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a22      	ldr	r2, [pc, #136]	; (8000c18 <I2C_PeriClockControl+0xa0>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d106      	bne.n	8000ba0 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000b92:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <I2C_PeriClockControl+0xa4>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a21      	ldr	r2, [pc, #132]	; (8000c1c <I2C_PeriClockControl+0xa4>)
 8000b98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
		else if (pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
}
}
 8000b9e:	e035      	b.n	8000c0c <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C2)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a1f      	ldr	r2, [pc, #124]	; (8000c20 <I2C_PeriClockControl+0xa8>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d106      	bne.n	8000bb6 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <I2C_PeriClockControl+0xa4>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	4a1b      	ldr	r2, [pc, #108]	; (8000c1c <I2C_PeriClockControl+0xa4>)
 8000bae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bb2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bb4:	e02a      	b.n	8000c0c <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C3)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a1a      	ldr	r2, [pc, #104]	; (8000c24 <I2C_PeriClockControl+0xac>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d126      	bne.n	8000c0c <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <I2C_PeriClockControl+0xa4>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a16      	ldr	r2, [pc, #88]	; (8000c1c <I2C_PeriClockControl+0xa4>)
 8000bc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bca:	e01f      	b.n	8000c0c <I2C_PeriClockControl+0x94>
	if(pI2Cx == I2C1)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <I2C_PeriClockControl+0xa0>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d106      	bne.n	8000be2 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <I2C_PeriClockControl+0xa4>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <I2C_PeriClockControl+0xa4>)
 8000bda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000bde:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000be0:	e014      	b.n	8000c0c <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C2)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <I2C_PeriClockControl+0xa8>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d106      	bne.n	8000bf8 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <I2C_PeriClockControl+0xa4>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <I2C_PeriClockControl+0xa4>)
 8000bf0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bf6:	e009      	b.n	8000c0c <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C3)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <I2C_PeriClockControl+0xac>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d105      	bne.n	8000c0c <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <I2C_PeriClockControl+0xa4>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <I2C_PeriClockControl+0xa4>)
 8000c06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000c0a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40005800 	.word	0x40005800
 8000c24:	40005c00 	.word	0x40005c00

08000c28 <RCC_GetPLLOutputClock>:

/*
 * Init and De-init
 */
uint32_t RCC_GetPLLOutputClock(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
	uint32_t PLLOut=0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
	return PLLOut;
 8000c32:	687b      	ldr	r3, [r7, #4]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc,temp,ahbp,temp2,apbp;
	clksrc = RCC->RCC_CFGR >>2 &  0X3;
 8000c46:	4b26      	ldr	r3, [pc, #152]	; (8000ce0 <RCC_GetPCLK1Value+0xa0>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	089b      	lsrs	r3, r3, #2
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	f003 0303 	and.w	r3, r3, #3
 8000c52:	727b      	strb	r3, [r7, #9]
	if(clksrc == 0)
 8000c54:	7a7b      	ldrb	r3, [r7, #9]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d102      	bne.n	8000c60 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000c5a:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <RCC_GetPCLK1Value+0xa4>)
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	e00b      	b.n	8000c78 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000c60:	7a7b      	ldrb	r3, [r7, #9]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d102      	bne.n	8000c6c <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <RCC_GetPCLK1Value+0xa8>)
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	e005      	b.n	8000c78 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc ==2)
 8000c6c:	7a7b      	ldrb	r3, [r7, #9]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d102      	bne.n	8000c78 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk= RCC_GetPLLOutputClock();
 8000c72:	f7ff ffd9 	bl	8000c28 <RCC_GetPLLOutputClock>
 8000c76:	60f8      	str	r0, [r7, #12]
	}


	temp = (RCC->RCC_CFGR >>4) & 0xF;
 8000c78:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <RCC_GetPCLK1Value+0xa0>)
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	091b      	lsrs	r3, r3, #4
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	f003 030f 	and.w	r3, r3, #15
 8000c84:	723b      	strb	r3, [r7, #8]
	if (temp< 8)
 8000c86:	7a3b      	ldrb	r3, [r7, #8]
 8000c88:	2b07      	cmp	r3, #7
 8000c8a:	d802      	bhi.n	8000c92 <RCC_GetPCLK1Value+0x52>
		ahbp=1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	72fb      	strb	r3, [r7, #11]
 8000c90:	e005      	b.n	8000c9e <RCC_GetPCLK1Value+0x5e>
	else
	{
		ahbp = AHB_PreScalar[temp-8];
 8000c92:	7a3b      	ldrb	r3, [r7, #8]
 8000c94:	3b08      	subs	r3, #8
 8000c96:	4a15      	ldr	r2, [pc, #84]	; (8000cec <RCC_GetPCLK1Value+0xac>)
 8000c98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c9c:	72fb      	strb	r3, [r7, #11]
	}
	temp2 = (RCC->RCC_CFGR >> 10) & 0x7;
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <RCC_GetPCLK1Value+0xa0>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	0a9b      	lsrs	r3, r3, #10
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	71fb      	strb	r3, [r7, #7]
	if (temp2 < 4)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d802      	bhi.n	8000cb8 <RCC_GetPCLK1Value+0x78>
		apbp=1;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	72bb      	strb	r3, [r7, #10]
 8000cb6:	e005      	b.n	8000cc4 <RCC_GetPCLK1Value+0x84>
	else
	{
		apbp = APB_PreScalar[temp2-4];
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	4a0c      	ldr	r2, [pc, #48]	; (8000cf0 <RCC_GetPCLK1Value+0xb0>)
 8000cbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cc2:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) /apbp;
 8000cc4:	7afb      	ldrb	r3, [r7, #11]
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ccc:	7abb      	ldrb	r3, [r7, #10]
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	603b      	str	r3, [r7, #0]
	return pclk1;
 8000cd4:	683b      	ldr	r3, [r7, #0]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	00f42400 	.word	0x00f42400
 8000ce8:	007a1200 	.word	0x007a1200
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000010 	.word	0x20000010

08000cf4 <I2C_Init>:
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	uint32_t tempreg=0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << I2C_CR1_ACK;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	7a5b      	ldrb	r3, [r3, #9]
 8000d04:	029b      	lsls	r3, r3, #10
 8000d06:	461a      	mov	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->I2C_CR1 = tempreg;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	601a      	str	r2, [r3, #0]
	//configure the freq field of CR2
	tempreg = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
	tempreg = RCC_GetPCLK1Value() / 1000000U;
 8000d1a:	f7ff ff91 	bl	8000c40 <RCC_GetPCLK1Value>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	4b48      	ldr	r3, [pc, #288]	; (8000e44 <I2C_Init+0x150>)
 8000d22:	fba3 2302 	umull	r2, r3, r3, r2
 8000d26:	0c9b      	lsrs	r3, r3, #18
 8000d28:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->I2C_CR2 = (tempreg & 0x3F);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d34:	605a      	str	r2, [r3, #4]
	//program the device own address

	tempreg = pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	7a1b      	ldrb	r3, [r3, #8]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->I2C_OAR1 = (tempreg & (0xFE));
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000d48:	609a      	str	r2, [r3, #8]
	pI2CHandle->pI2Cx->I2C_OAR1 |= (1<< 14);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d58:	609a      	str	r2, [r3, #8]


	//ccr calculations
	uint16_t ccr_value =0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	817b      	strh	r3, [r7, #10]
	tempreg=0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
	if (pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	4a38      	ldr	r2, [pc, #224]	; (8000e48 <I2C_Init+0x154>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d80f      	bhi.n	8000d8c <I2C_Init+0x98>
	{
		//standard mode
		ccr_value = RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000d6c:	f7ff ff68 	bl	8000c40 <RCC_GetPCLK1Value>
 8000d70:	4602      	mov	r2, r0
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7c:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000d7e:	897b      	ldrh	r3, [r7, #10]
 8000d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	e031      	b.n	8000df0 <I2C_Init+0xfc>
	}else
	{
		//fast mode
		tempreg |= (1<< I2C_CCR_FS);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d92:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	7a9b      	ldrb	r3, [r3, #10]
 8000d98:	039b      	lsls	r3, r3, #14
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	7a9b      	ldrb	r3, [r3, #10]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d10b      	bne.n	8000dc2 <I2C_Init+0xce>
		{
			ccr_value = RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000daa:	f7ff ff49 	bl	8000c40 <RCC_GetPCLK1Value>
 8000dae:	4601      	mov	r1, r0
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	4613      	mov	r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	4413      	add	r3, r2
 8000dba:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dbe:	817b      	strh	r3, [r7, #10]
 8000dc0:	e010      	b.n	8000de4 <I2C_Init+0xf0>
		}
		else if (pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_16_9)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7a9b      	ldrb	r3, [r3, #10]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d10c      	bne.n	8000de4 <I2C_Init+0xf0>
		{
			ccr_value = RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000dca:	f7ff ff39 	bl	8000c40 <RCC_GetPCLK1Value>
 8000dce:	4601      	mov	r1, r0
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	009a      	lsls	r2, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	fbb1 f3f3 	udiv	r3, r1, r3
 8000de2:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000de4:	897b      	ldrh	r3, [r7, #10]
 8000de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]
	}
		pI2CHandle->pI2Cx->I2C_CCR = tempreg;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	68fa      	ldr	r2, [r7, #12]
 8000df6:	61da      	str	r2, [r3, #28]

		//configure TRISE
		if (pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <I2C_Init+0x154>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d809      	bhi.n	8000e16 <I2C_Init+0x122>
			{
				//standard mode

				tempreg = (RCC_GetPLLOutputClock()/1000000U) +1;
 8000e02:	f7ff ff11 	bl	8000c28 <RCC_GetPLLOutputClock>
 8000e06:	4602      	mov	r2, r0
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <I2C_Init+0x150>)
 8000e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8000e0e:	0c9b      	lsrs	r3, r3, #18
 8000e10:	3301      	adds	r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	e00c      	b.n	8000e30 <I2C_Init+0x13c>
			}else
			{
				//fast mode
				tempreg = ((RCC_GetPLLOutputClock()*300)/100000000U) +1;
 8000e16:	f7ff ff07 	bl	8000c28 <RCC_GetPLLOutputClock>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000e20:	fb03 f302 	mul.w	r3, r3, r2
 8000e24:	4a09      	ldr	r2, [pc, #36]	; (8000e4c <I2C_Init+0x158>)
 8000e26:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2a:	0e5b      	lsrs	r3, r3, #25
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
			}
				pI2CHandle->pI2Cx->I2C_TRISE = (tempreg & 0x3F);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e3a:	621a      	str	r2, [r3, #32]

}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	431bde83 	.word	0x431bde83
 8000e48:	000186a0 	.word	0x000186a0
 8000e4c:	55e63b89 	.word	0x55e63b89

08000e50 <I2C_MasterSendDataIT>:
	}


}
uint8_t I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	70fb      	strb	r3, [r7, #3]

	uint8_t busystate = pI2CHandle->TxRxState;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	7f1b      	ldrb	r3, [r3, #28]
 8000e62:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX)) // if bus is not busy
 8000e64:	7dfb      	ldrb	r3, [r7, #23]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d030      	beq.n	8000ecc <I2C_MasterSendDataIT+0x7c>
 8000e6a:	7dfb      	ldrb	r3, [r7, #23]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d02d      	beq.n	8000ecc <I2C_MasterSendDataIT+0x7c>
	{
		pI2CHandle->pTxBuffer = pTxbuffer;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen = Len;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	615a      	str	r2, [r3, #20]
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2202      	movs	r2, #2
 8000e80:	771a      	strb	r2, [r3, #28]
		pI2CHandle->DevAddr = SlaveAddr;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	78fa      	ldrb	r2, [r7, #3]
 8000e86:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fdeb 	bl	8000a72 <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->I2C_CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	685a      	ldr	r2, [r3, #4]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000eaa:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->I2C_CR2 |= (1 << I2C_CR2_ITEVTEN);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000eba:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->I2C_CR2 |= (1<< I2C_CR2_ITERREN);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000eca:	605a      	str	r2, [r3, #4]


	}

	return busystate;
 8000ecc:	7dfb      	ldrb	r3, [r7, #23]

}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <I2C_MasterReceiveDataIT>:
uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)

{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	60f8      	str	r0, [r7, #12]
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	71fb      	strb	r3, [r7, #7]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	71bb      	strb	r3, [r7, #6]

	uint8_t busystate = pI2CHandle->TxRxState;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	7f1b      	ldrb	r3, [r3, #28]
 8000ef0:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8000ef2:	7dfb      	ldrb	r3, [r7, #23]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d033      	beq.n	8000f60 <I2C_MasterReceiveDataIT+0x8a>
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d030      	beq.n	8000f60 <I2C_MasterReceiveDataIT+0x8a>
	{
		pI2CHandle->pRxBuffer = pRxBuffer;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen = Len;
 8000f04:	79fa      	ldrb	r2, [r7, #7]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	619a      	str	r2, [r3, #24]
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	771a      	strb	r2, [r3, #28]
		pI2CHandle->RxSize = Len; //Rxsize is used in the ISR code to manage the data reception
 8000f10:	79fa      	ldrb	r2, [r7, #7]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	621a      	str	r2, [r3, #32]
		pI2CHandle->DevAddr = SlaveAddr;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	79ba      	ldrb	r2, [r7, #6]
 8000f1a:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fda1 	bl	8000a72 <I2C_GenerateStartCondition>


		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->I2C_CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f3e:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->I2C_CR2 |= (1 << I2C_CR2_ITEVTEN);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f4e:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->I2C_CR2 |= (1<< I2C_CR2_ITERREN);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f5e:	605a      	str	r2, [r3, #4]

	}

	return busystate;
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <I2C_CloseReceiveData>:


void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->I2C_CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f80:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->I2C_CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f90:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	7a5b      	ldrb	r3, [r3, #9]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d105      	bne.n	8000fbe <I2C_CloseReceiveData+0x54>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,ENABLE);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fa9f 	bl	80014fc <I2C_ManageAcking>
	}
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <I2C_CloseSendData>:
void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
	//Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->I2C_CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fdc:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN Control Bit
	pI2CHandle->pI2Cx->I2C_CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fec:	605a      	str	r2, [r3, #4]


	pI2CHandle->TxRxState = I2C_READY;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <I2C_IRQInterruptConfig>:

/*
 * IRQ Configuration and ISR handling
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t En_or_Di)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	460a      	mov	r2, r1
 8001016:	71fb      	strb	r3, [r7, #7]
 8001018:	4613      	mov	r3, r2
 800101a:	71bb      	strb	r3, [r7, #6]
	if(En_or_Di == ENABLE)
 800101c:	79bb      	ldrb	r3, [r7, #6]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d133      	bne.n	800108a <I2C_IRQInterruptConfig+0x7e>
		{
			if(IRQNumber <=31)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b1f      	cmp	r3, #31
 8001026:	d80a      	bhi.n	800103e <I2C_IRQInterruptConfig+0x32>
			{
					//program ISER0 reg
				*NVIC_ISER0 |= (1<<IRQNumber);
 8001028:	4b35      	ldr	r3, [pc, #212]	; (8001100 <I2C_IRQInterruptConfig+0xf4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	79fa      	ldrb	r2, [r7, #7]
 800102e:	2101      	movs	r1, #1
 8001030:	fa01 f202 	lsl.w	r2, r1, r2
 8001034:	4611      	mov	r1, r2
 8001036:	4a32      	ldr	r2, [pc, #200]	; (8001100 <I2C_IRQInterruptConfig+0xf4>)
 8001038:	430b      	orrs	r3, r1
 800103a:	6013      	str	r3, [r2, #0]
			else if(IRQNumber >=64 && IRQNumber <96)
			{
				*NVIC_ICER2 |= (1<<(IRQNumber % 64));
			}
		}
}
 800103c:	e059      	b.n	80010f2 <I2C_IRQInterruptConfig+0xe6>
			else if(IRQNumber >31 && IRQNumber <64)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b1f      	cmp	r3, #31
 8001042:	d90f      	bls.n	8001064 <I2C_IRQInterruptConfig+0x58>
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	2b3f      	cmp	r3, #63	; 0x3f
 8001048:	d80c      	bhi.n	8001064 <I2C_IRQInterruptConfig+0x58>
				*NVIC_ISER1 |= (1<<(IRQNumber % 32));
 800104a:	4b2e      	ldr	r3, [pc, #184]	; (8001104 <I2C_IRQInterruptConfig+0xf8>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	79fa      	ldrb	r2, [r7, #7]
 8001050:	f002 021f 	and.w	r2, r2, #31
 8001054:	2101      	movs	r1, #1
 8001056:	fa01 f202 	lsl.w	r2, r1, r2
 800105a:	4611      	mov	r1, r2
 800105c:	4a29      	ldr	r2, [pc, #164]	; (8001104 <I2C_IRQInterruptConfig+0xf8>)
 800105e:	430b      	orrs	r3, r1
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	e046      	b.n	80010f2 <I2C_IRQInterruptConfig+0xe6>
			else if(IRQNumber >=64 && IRQNumber <96)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	2b3f      	cmp	r3, #63	; 0x3f
 8001068:	d943      	bls.n	80010f2 <I2C_IRQInterruptConfig+0xe6>
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b5f      	cmp	r3, #95	; 0x5f
 800106e:	d840      	bhi.n	80010f2 <I2C_IRQInterruptConfig+0xe6>
				*NVIC_ISER2 |= (1<<(IRQNumber % 64));
 8001070:	4b25      	ldr	r3, [pc, #148]	; (8001108 <I2C_IRQInterruptConfig+0xfc>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	79fa      	ldrb	r2, [r7, #7]
 8001076:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800107a:	2101      	movs	r1, #1
 800107c:	fa01 f202 	lsl.w	r2, r1, r2
 8001080:	4611      	mov	r1, r2
 8001082:	4a21      	ldr	r2, [pc, #132]	; (8001108 <I2C_IRQInterruptConfig+0xfc>)
 8001084:	430b      	orrs	r3, r1
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	e033      	b.n	80010f2 <I2C_IRQInterruptConfig+0xe6>
			if(IRQNumber <=31)
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b1f      	cmp	r3, #31
 800108e:	d80a      	bhi.n	80010a6 <I2C_IRQInterruptConfig+0x9a>
				*NVIC_ICER0 |= (1<<IRQNumber);
 8001090:	4b1e      	ldr	r3, [pc, #120]	; (800110c <I2C_IRQInterruptConfig+0x100>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	79fa      	ldrb	r2, [r7, #7]
 8001096:	2101      	movs	r1, #1
 8001098:	fa01 f202 	lsl.w	r2, r1, r2
 800109c:	4611      	mov	r1, r2
 800109e:	4a1b      	ldr	r2, [pc, #108]	; (800110c <I2C_IRQInterruptConfig+0x100>)
 80010a0:	430b      	orrs	r3, r1
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	e025      	b.n	80010f2 <I2C_IRQInterruptConfig+0xe6>
			else if(IRQNumber >31 && IRQNumber <64)
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b1f      	cmp	r3, #31
 80010aa:	d90f      	bls.n	80010cc <I2C_IRQInterruptConfig+0xc0>
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	2b3f      	cmp	r3, #63	; 0x3f
 80010b0:	d80c      	bhi.n	80010cc <I2C_IRQInterruptConfig+0xc0>
				*NVIC_ICER1 |= (1<<(IRQNumber % 32));
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <I2C_IRQInterruptConfig+0x104>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	79fa      	ldrb	r2, [r7, #7]
 80010b8:	f002 021f 	and.w	r2, r2, #31
 80010bc:	2101      	movs	r1, #1
 80010be:	fa01 f202 	lsl.w	r2, r1, r2
 80010c2:	4611      	mov	r1, r2
 80010c4:	4a12      	ldr	r2, [pc, #72]	; (8001110 <I2C_IRQInterruptConfig+0x104>)
 80010c6:	430b      	orrs	r3, r1
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e012      	b.n	80010f2 <I2C_IRQInterruptConfig+0xe6>
			else if(IRQNumber >=64 && IRQNumber <96)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	2b3f      	cmp	r3, #63	; 0x3f
 80010d0:	d90f      	bls.n	80010f2 <I2C_IRQInterruptConfig+0xe6>
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	2b5f      	cmp	r3, #95	; 0x5f
 80010d6:	d80c      	bhi.n	80010f2 <I2C_IRQInterruptConfig+0xe6>
				*NVIC_ICER2 |= (1<<(IRQNumber % 64));
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <I2C_IRQInterruptConfig+0x108>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	79fa      	ldrb	r2, [r7, #7]
 80010de:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80010e2:	2101      	movs	r1, #1
 80010e4:	fa01 f202 	lsl.w	r2, r1, r2
 80010e8:	4611      	mov	r1, r2
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <I2C_IRQInterruptConfig+0x108>)
 80010ec:	430b      	orrs	r3, r1
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	e7ff      	b.n	80010f2 <I2C_IRQInterruptConfig+0xe6>
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000e100 	.word	0xe000e100
 8001104:	e000e104 	.word	0xe000e104
 8001108:	e000e108 	.word	0xe000e108
 800110c:	e000e180 	.word	0xe000e180
 8001110:	e000e184 	.word	0xe000e184
 8001114:	e000e188 	.word	0xe000e188

08001118 <I2C_MasterHandleRXNEInterrupt>:
		*(NVIC_PR_BASE_ADDR +iprx) |= (IRQPriority << shift_amount);

}

void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->RxSize == 1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d110      	bne.n	800114a <I2C_MasterHandleRXNEInterrupt+0x32>
		{
				*pI2CHandle->pRxBuffer=pI2CHandle->pI2Cx->I2C_DR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	691a      	ldr	r2, [r3, #16]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	701a      	strb	r2, [r3, #0]
				pI2CHandle->pRxBuffer++;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	611a      	str	r2, [r3, #16]
				pI2CHandle->RxLen--;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	1e5a      	subs	r2, r3, #1
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	619a      	str	r2, [r3, #24]
		}
		if(pI2CHandle->RxSize > 1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d91a      	bls.n	8001188 <I2C_MasterHandleRXNEInterrupt+0x70>
		{
			if(pI2CHandle->RxLen==2)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d105      	bne.n	8001166 <I2C_MasterHandleRXNEInterrupt+0x4e>
			{
				//clear the ack bit
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f9cb 	bl	80014fc <I2C_ManageAcking>
			}

				//READ dr
			*pI2CHandle->pRxBuffer=pI2CHandle->pI2Cx->I2C_DR;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	701a      	strb	r2, [r3, #0]
			pI2CHandle->pRxBuffer++;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	611a      	str	r2, [r3, #16]
			pI2CHandle->RxLen--;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	1e5a      	subs	r2, r3, #1
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	619a      	str	r2, [r3, #24]
		}
		if(pI2CHandle->RxLen==0)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d110      	bne.n	80011b2 <I2C_MasterHandleRXNEInterrupt+0x9a>
		{
			//close the I2C Data andnotify the app

			//1 generate the stop
			if(pI2CHandle->Sr ==I2C_DISABLE_SR)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001196:	2b00      	cmp	r3, #0
 8001198:	d104      	bne.n	80011a4 <I2C_MasterHandleRXNEInterrupt+0x8c>
				I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fca3 	bl	8000aea <I2C_GenerateStopCondition>
			//2 close the i2c rx
			I2C_CloseReceiveData(pI2CHandle);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff fee0 	bl	8000f6a <I2C_CloseReceiveData>
			//notify app
			I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 80011aa:	2101      	movs	r1, #1
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff f9a7 	bl	8000500 <I2C_ApplicationEventCallback>
		}

}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <I2C_EV_IRQHandling>:


void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b088      	sub	sp, #32
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
	//Interrupt handling for both master and slave mode of a device
	volatile uint32_t temp1=0, temp2=0,temp3=0, I2C_CR2Reg=0, temp4=0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
	volatile uint32_t I2C_CR2_ITEVTENReg=0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
	//1. Handle for interrupt generated by SB Event
	I2C_CR2Reg = pI2CHandle->pI2Cx->I2C_CR2;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	613b      	str	r3, [r7, #16]
	I2C_CR2_ITEVTENReg = (1 << I2C_CR2_ITEVTEN);
 80011e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011e6:	60bb      	str	r3, [r7, #8]
	temp1 = I2C_CR2Reg & I2C_CR2_ITEVTENReg;
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61fb      	str	r3, [r7, #28]

	temp4 = pI2CHandle->pI2Cx->I2C_CR2 & ( 1 << I2C_CR2_ITEVTEN);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011fa:	60fb      	str	r3, [r7, #12]
	temp2 = pI2CHandle->pI2Cx->I2C_CR2 & ( 1 << I2C_CR2_ITBUFEN);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001206:	61bb      	str	r3, [r7, #24]
	temp3 = pI2CHandle->pI2Cx->I2C_SR1 & (1<< I2C_SR1_SB);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	617b      	str	r3, [r7, #20]
	if(temp1 && temp3)
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d01a      	beq.n	8001250 <I2C_EV_IRQHandling+0x96>
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d017      	beq.n	8001250 <I2C_EV_IRQHandling+0x96>
	{
		//handle SB bit interrupt , WON'T BE EXECUTED IN SLAVE MODE
		//in this block lets excute the address phase.
				if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	7f1b      	ldrb	r3, [r3, #28]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d107      	bne.n	8001238 <I2C_EV_IRQHandling+0x7e>
					I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7f5b      	ldrb	r3, [r3, #29]
 8001230:	4619      	mov	r1, r3
 8001232:	4610      	mov	r0, r2
 8001234:	f7ff fc43 	bl	8000abe <I2C_ExecuteAddressPhaseRead>
				if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	7f1b      	ldrb	r3, [r3, #28]
 800123c:	2b02      	cmp	r3, #2
 800123e:	d107      	bne.n	8001250 <I2C_EV_IRQHandling+0x96>
					I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7f5b      	ldrb	r3, [r3, #29]
 8001248:	4619      	mov	r1, r3
 800124a:	4610      	mov	r0, r2
 800124c:	f7ff fc21 	bl	8000a92 <I2C_ExecuteAddressPhaseWrite>
	}
	temp3=0;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
	//2. Handle for interrupt generated by ADDR EVent
	//note: when master mode: address is sent, when slave mode: address matched with own address.
	temp3 = pI2CHandle->pI2Cx->I2C_SR1 & (1<< I2C_SR1_ADDR);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	617b      	str	r3, [r7, #20]
	if(temp1 && temp3)
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d005      	beq.n	8001272 <I2C_EV_IRQHandling+0xb8>
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d002      	beq.n	8001272 <I2C_EV_IRQHandling+0xb8>
		{
			//handle ADDR bit interrupt
			I2C_ClearADDRFlag(pI2CHandle);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff fc4c 	bl	8000b0a <I2C_ClearADDRFlag>

		}
	temp3=0;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
	//3 Handle for interrupt generated by BTF(byte transfer finished) event
	temp3 = pI2CHandle->pI2Cx->I2C_SR1 & (1<< I2C_SR1_BTF);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	617b      	str	r3, [r7, #20]
	if(temp1 && temp3)
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d022      	beq.n	80012ce <I2C_EV_IRQHandling+0x114>
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d01f      	beq.n	80012ce <I2C_EV_IRQHandling+0x114>
		{
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7f1b      	ldrb	r3, [r3, #28]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d11b      	bne.n	80012ce <I2C_EV_IRQHandling+0x114>
		{
			//make sure that TXCE is also set
			if(pI2CHandle->pI2Cx->I2C_SR1 & (1<< I2C_SR1_TXE))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d014      	beq.n	80012ce <I2C_EV_IRQHandling+0x114>
			{
				//btf and txe are set
				if(pI2CHandle->TxLen == RESET)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d110      	bne.n	80012ce <I2C_EV_IRQHandling+0x114>
				{
						//1. generate stop condition
						if(pI2CHandle->Sr ==I2C_DISABLE_SR)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d104      	bne.n	80012c0 <I2C_EV_IRQHandling+0x106>
							I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fc15 	bl	8000aea <I2C_GenerateStopCondition>

						//2. reset all member elements of the handle structure.
						I2C_CloseSendData(pI2CHandle);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff fe80 	bl	8000fc6 <I2C_CloseSendData>

						//3. notify the app about transmission complete
						I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 80012c6:	2100      	movs	r1, #0
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff f919 	bl	8000500 <I2C_ApplicationEventCallback>
			{
			 	 //make sure that RXNE is also set
				; //we don't close com
			}
		}
	temp3=0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
	//4 Handle for interrupt generated by STOPF: Stop detecting flag is applicable only slave mode.
	temp3 = pI2CHandle->pI2Cx->I2C_SR1 & (1<< I2C_SR1_STOPF);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	f003 0310 	and.w	r3, r3, #16
 80012dc:	617b      	str	r3, [r7, #20]
	if(temp1 && temp3)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00c      	beq.n	80012fe <I2C_EV_IRQHandling+0x144>
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d009      	beq.n	80012fe <I2C_EV_IRQHandling+0x144>
		{
			//handle STOPF bit interrupt
			//clear the STOPF - read sr1 and write to cr1
			pI2CHandle->pI2Cx->I2C_CR1 |= 0x0000;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	601a      	str	r2, [r3, #0]
			//notify the app that stop is detected
			I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 80012f6:	2102      	movs	r1, #2
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff f901 	bl	8000500 <I2C_ApplicationEventCallback>

		}
	temp3=0;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]

	//5 Handle for interrupt generated by TXE event
	temp3 = pI2CHandle->pI2Cx->I2C_SR1 & (1<< I2C_SR1_TXE);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130c:	617b      	str	r3, [r7, #20]
	if(((temp1 && temp2 && temp3) == SET))
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d007      	beq.n	8001324 <I2C_EV_IRQHandling+0x16a>
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d004      	beq.n	8001324 <I2C_EV_IRQHandling+0x16a>
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <I2C_EV_IRQHandling+0x16a>
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <I2C_EV_IRQHandling+0x16c>
 8001324:	2300      	movs	r3, #0
 8001326:	2b01      	cmp	r3, #1
 8001328:	d11e      	bne.n	8001368 <I2C_EV_IRQHandling+0x1ae>
	{
		//handle TXE event
		//write to dr register
		if( pI2CHandle->TxRxState == I2C_BUSY_IN_TX && pI2CHandle->TxLen > 0 && (pI2CHandle->pI2Cx->I2C_SR2 & ( 1<< I2C_SR2_MSL)))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7f1b      	ldrb	r3, [r3, #28]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d11a      	bne.n	8001368 <I2C_EV_IRQHandling+0x1ae>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d016      	beq.n	8001368 <I2C_EV_IRQHandling+0x1ae>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00f      	beq.n	8001368 <I2C_EV_IRQHandling+0x1ae>
		{
			pI2CHandle->pI2Cx->I2C_DR = *(pI2CHandle->pTxBuffer);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	781a      	ldrb	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	611a      	str	r2, [r3, #16]
			pI2CHandle->pTxBuffer++;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	1c5a      	adds	r2, r3, #1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60da      	str	r2, [r3, #12]
			pI2CHandle->TxLen--;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	1e5a      	subs	r2, r3, #1
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	615a      	str	r2, [r3, #20]
		}
	}
	temp3 =0;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
	//6 handle for interrupt generated by RXNE Event
	temp3 = pI2CHandle->pI2Cx->I2C_SR1 & ( 1<< I2C_SR1_RXNE);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001376:	617b      	str	r3, [r7, #20]
	if(((temp1 && temp2 && temp3) == SET))
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d007      	beq.n	800138e <I2C_EV_IRQHandling+0x1d4>
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d004      	beq.n	800138e <I2C_EV_IRQHandling+0x1d4>
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <I2C_EV_IRQHandling+0x1d4>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <I2C_EV_IRQHandling+0x1d6>
 800138e:	2300      	movs	r3, #0
 8001390:	2b01      	cmp	r3, #1
 8001392:	d10d      	bne.n	80013b0 <I2C_EV_IRQHandling+0x1f6>
	{
		if( pI2CHandle->pI2Cx->I2C_SR2 & (1 << I2C_SR2_MSL))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d006      	beq.n	80013b0 <I2C_EV_IRQHandling+0x1f6>
		{	//i2c is maste r
				if( pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	7f1b      	ldrb	r3, [r3, #28]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d102      	bne.n	80013b0 <I2C_EV_IRQHandling+0x1f6>
				{
					I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff feb4 	bl	8001118 <I2C_MasterHandleRXNEInterrupt>
				}
		}

	}
}
 80013b0:	bf00      	nop
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <I2C_ER_IRQHandling>:
						#define I2C_ERROR_TIMEOUT 7

 */

void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->I2C_CR2) & ( 1 << I2C_CR2_ITERREN);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ca:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->I2C_SR1) & ( 1<< I2C_SR1_BERR);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d6:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00e      	beq.n	80013fc <I2C_ER_IRQHandling+0x44>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00b      	beq.n	80013fc <I2C_ER_IRQHandling+0x44>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->I2C_SR1 &= ~( 1 << I2C_SR1_BERR);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	695a      	ldr	r2, [r3, #20]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013f2:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 80013f4:	2103      	movs	r1, #3
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff f882 	bl	8000500 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->I2C_SR1) & ( 1 << I2C_SR1_ARLO );
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001406:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00e      	beq.n	800142c <I2C_ER_IRQHandling+0x74>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00b      	beq.n	800142c <I2C_ER_IRQHandling+0x74>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->I2C_SR1 &= ~( 1 << I2C_SR1_ARLO);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	695a      	ldr	r2, [r3, #20]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001422:	615a      	str	r2, [r3, #20]
		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 8001424:	2104      	movs	r1, #4
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff f86a 	bl	8000500 <I2C_ApplicationEventCallback>
	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->I2C_SR1) & ( 1 << I2C_SR1_AF);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001436:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00e      	beq.n	800145c <I2C_ER_IRQHandling+0xa4>
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d00b      	beq.n	800145c <I2C_ER_IRQHandling+0xa4>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->I2C_SR1 &= ~( 1 << I2C_SR1_AF);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	695a      	ldr	r2, [r3, #20]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001452:	615a      	str	r2, [r3, #20]
		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 8001454:	2105      	movs	r1, #5
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff f852 	bl	8000500 <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->I2C_SR1) & ( 1 << I2C_SR1_OVR);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001466:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00e      	beq.n	800148c <I2C_ER_IRQHandling+0xd4>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00b      	beq.n	800148c <I2C_ER_IRQHandling+0xd4>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->I2C_SR1 &= ~( 1 << I2C_SR1_OVR);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001482:	615a      	str	r2, [r3, #20]
		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 8001484:	2106      	movs	r1, #6
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff f83a 	bl	8000500 <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->I2C_SR1) & ( 1 << I2C_SR1_TIMEOUT);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001496:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00e      	beq.n	80014bc <I2C_ER_IRQHandling+0x104>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00b      	beq.n	80014bc <I2C_ER_IRQHandling+0x104>
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->I2C_SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	695a      	ldr	r2, [r3, #20]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014b2:	615a      	str	r2, [r3, #20]
		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 80014b4:	2107      	movs	r1, #7
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff f822 	bl	8000500 <I2C_ApplicationEventCallback>
	}

}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <I2C_PeripheralControl>:

/*
 * Other Peripheral Control APIs
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d106      	bne.n	80014e4 <I2C_PeripheralControl+0x20>

	{
		pI2Cx->I2C_CR1 |= ( 1 << I2C_CR1_PE);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f043 0201 	orr.w	r2, r3, #1
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->I2C_CR1 &= ~( 1 << I2C_CR1_PE);
	}
}
 80014e2:	e005      	b.n	80014f0 <I2C_PeripheralControl+0x2c>
		pI2Cx->I2C_CR1 &= ~( 1 << I2C_CR1_PE);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f023 0201 	bic.w	r2, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	601a      	str	r2, [r3, #0]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <I2C_ManageAcking>:
		return FLAG_SET;
	}
	return FLAG_RESET;
}
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d106      	bne.n	800151c <I2C_ManageAcking+0x20>

		{
			pI2Cx->I2C_CR1|= ( 1 << I2C_CR1_ACK);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	601a      	str	r2, [r3, #0]
		}
		else
		{
			pI2Cx->I2C_CR1 &= ~( 1 << I2C_CR1_ACK);
		}
}
 800151a:	e005      	b.n	8001528 <I2C_ManageAcking+0x2c>
			pI2Cx->I2C_CR1 &= ~( 1 << I2C_CR1_ACK);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	601a      	str	r2, [r3, #0]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <__libc_init_array>:
 8001534:	b570      	push	{r4, r5, r6, lr}
 8001536:	4e0d      	ldr	r6, [pc, #52]	; (800156c <__libc_init_array+0x38>)
 8001538:	4c0d      	ldr	r4, [pc, #52]	; (8001570 <__libc_init_array+0x3c>)
 800153a:	1ba4      	subs	r4, r4, r6
 800153c:	10a4      	asrs	r4, r4, #2
 800153e:	2500      	movs	r5, #0
 8001540:	42a5      	cmp	r5, r4
 8001542:	d109      	bne.n	8001558 <__libc_init_array+0x24>
 8001544:	4e0b      	ldr	r6, [pc, #44]	; (8001574 <__libc_init_array+0x40>)
 8001546:	4c0c      	ldr	r4, [pc, #48]	; (8001578 <__libc_init_array+0x44>)
 8001548:	f001 fa3a 	bl	80029c0 <_init>
 800154c:	1ba4      	subs	r4, r4, r6
 800154e:	10a4      	asrs	r4, r4, #2
 8001550:	2500      	movs	r5, #0
 8001552:	42a5      	cmp	r5, r4
 8001554:	d105      	bne.n	8001562 <__libc_init_array+0x2e>
 8001556:	bd70      	pop	{r4, r5, r6, pc}
 8001558:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800155c:	4798      	blx	r3
 800155e:	3501      	adds	r5, #1
 8001560:	e7ee      	b.n	8001540 <__libc_init_array+0xc>
 8001562:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001566:	4798      	blx	r3
 8001568:	3501      	adds	r5, #1
 800156a:	e7f2      	b.n	8001552 <__libc_init_array+0x1e>
 800156c:	08002ad8 	.word	0x08002ad8
 8001570:	08002ad8 	.word	0x08002ad8
 8001574:	08002ad8 	.word	0x08002ad8
 8001578:	08002adc 	.word	0x08002adc

0800157c <memset>:
 800157c:	4402      	add	r2, r0
 800157e:	4603      	mov	r3, r0
 8001580:	4293      	cmp	r3, r2
 8001582:	d100      	bne.n	8001586 <memset+0xa>
 8001584:	4770      	bx	lr
 8001586:	f803 1b01 	strb.w	r1, [r3], #1
 800158a:	e7f9      	b.n	8001580 <memset+0x4>

0800158c <iprintf>:
 800158c:	b40f      	push	{r0, r1, r2, r3}
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <iprintf+0x2c>)
 8001590:	b513      	push	{r0, r1, r4, lr}
 8001592:	681c      	ldr	r4, [r3, #0]
 8001594:	b124      	cbz	r4, 80015a0 <iprintf+0x14>
 8001596:	69a3      	ldr	r3, [r4, #24]
 8001598:	b913      	cbnz	r3, 80015a0 <iprintf+0x14>
 800159a:	4620      	mov	r0, r4
 800159c:	f000 fa22 	bl	80019e4 <__sinit>
 80015a0:	ab05      	add	r3, sp, #20
 80015a2:	9a04      	ldr	r2, [sp, #16]
 80015a4:	68a1      	ldr	r1, [r4, #8]
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	4620      	mov	r0, r4
 80015aa:	f000 fbdb 	bl	8001d64 <_vfiprintf_r>
 80015ae:	b002      	add	sp, #8
 80015b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015b4:	b004      	add	sp, #16
 80015b6:	4770      	bx	lr
 80015b8:	20000018 	.word	0x20000018

080015bc <_puts_r>:
 80015bc:	b570      	push	{r4, r5, r6, lr}
 80015be:	460e      	mov	r6, r1
 80015c0:	4605      	mov	r5, r0
 80015c2:	b118      	cbz	r0, 80015cc <_puts_r+0x10>
 80015c4:	6983      	ldr	r3, [r0, #24]
 80015c6:	b90b      	cbnz	r3, 80015cc <_puts_r+0x10>
 80015c8:	f000 fa0c 	bl	80019e4 <__sinit>
 80015cc:	69ab      	ldr	r3, [r5, #24]
 80015ce:	68ac      	ldr	r4, [r5, #8]
 80015d0:	b913      	cbnz	r3, 80015d8 <_puts_r+0x1c>
 80015d2:	4628      	mov	r0, r5
 80015d4:	f000 fa06 	bl	80019e4 <__sinit>
 80015d8:	4b23      	ldr	r3, [pc, #140]	; (8001668 <_puts_r+0xac>)
 80015da:	429c      	cmp	r4, r3
 80015dc:	d117      	bne.n	800160e <_puts_r+0x52>
 80015de:	686c      	ldr	r4, [r5, #4]
 80015e0:	89a3      	ldrh	r3, [r4, #12]
 80015e2:	071b      	lsls	r3, r3, #28
 80015e4:	d51d      	bpl.n	8001622 <_puts_r+0x66>
 80015e6:	6923      	ldr	r3, [r4, #16]
 80015e8:	b1db      	cbz	r3, 8001622 <_puts_r+0x66>
 80015ea:	3e01      	subs	r6, #1
 80015ec:	68a3      	ldr	r3, [r4, #8]
 80015ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80015f2:	3b01      	subs	r3, #1
 80015f4:	60a3      	str	r3, [r4, #8]
 80015f6:	b9e9      	cbnz	r1, 8001634 <_puts_r+0x78>
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	da2e      	bge.n	800165a <_puts_r+0x9e>
 80015fc:	4622      	mov	r2, r4
 80015fe:	210a      	movs	r1, #10
 8001600:	4628      	mov	r0, r5
 8001602:	f000 f83f 	bl	8001684 <__swbuf_r>
 8001606:	3001      	adds	r0, #1
 8001608:	d011      	beq.n	800162e <_puts_r+0x72>
 800160a:	200a      	movs	r0, #10
 800160c:	e011      	b.n	8001632 <_puts_r+0x76>
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <_puts_r+0xb0>)
 8001610:	429c      	cmp	r4, r3
 8001612:	d101      	bne.n	8001618 <_puts_r+0x5c>
 8001614:	68ac      	ldr	r4, [r5, #8]
 8001616:	e7e3      	b.n	80015e0 <_puts_r+0x24>
 8001618:	4b15      	ldr	r3, [pc, #84]	; (8001670 <_puts_r+0xb4>)
 800161a:	429c      	cmp	r4, r3
 800161c:	bf08      	it	eq
 800161e:	68ec      	ldreq	r4, [r5, #12]
 8001620:	e7de      	b.n	80015e0 <_puts_r+0x24>
 8001622:	4621      	mov	r1, r4
 8001624:	4628      	mov	r0, r5
 8001626:	f000 f87f 	bl	8001728 <__swsetup_r>
 800162a:	2800      	cmp	r0, #0
 800162c:	d0dd      	beq.n	80015ea <_puts_r+0x2e>
 800162e:	f04f 30ff 	mov.w	r0, #4294967295
 8001632:	bd70      	pop	{r4, r5, r6, pc}
 8001634:	2b00      	cmp	r3, #0
 8001636:	da04      	bge.n	8001642 <_puts_r+0x86>
 8001638:	69a2      	ldr	r2, [r4, #24]
 800163a:	429a      	cmp	r2, r3
 800163c:	dc06      	bgt.n	800164c <_puts_r+0x90>
 800163e:	290a      	cmp	r1, #10
 8001640:	d004      	beq.n	800164c <_puts_r+0x90>
 8001642:	6823      	ldr	r3, [r4, #0]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	6022      	str	r2, [r4, #0]
 8001648:	7019      	strb	r1, [r3, #0]
 800164a:	e7cf      	b.n	80015ec <_puts_r+0x30>
 800164c:	4622      	mov	r2, r4
 800164e:	4628      	mov	r0, r5
 8001650:	f000 f818 	bl	8001684 <__swbuf_r>
 8001654:	3001      	adds	r0, #1
 8001656:	d1c9      	bne.n	80015ec <_puts_r+0x30>
 8001658:	e7e9      	b.n	800162e <_puts_r+0x72>
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	200a      	movs	r0, #10
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	6022      	str	r2, [r4, #0]
 8001662:	7018      	strb	r0, [r3, #0]
 8001664:	e7e5      	b.n	8001632 <_puts_r+0x76>
 8001666:	bf00      	nop
 8001668:	08002a48 	.word	0x08002a48
 800166c:	08002a68 	.word	0x08002a68
 8001670:	08002a28 	.word	0x08002a28

08001674 <puts>:
 8001674:	4b02      	ldr	r3, [pc, #8]	; (8001680 <puts+0xc>)
 8001676:	4601      	mov	r1, r0
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	f7ff bf9f 	b.w	80015bc <_puts_r>
 800167e:	bf00      	nop
 8001680:	20000018 	.word	0x20000018

08001684 <__swbuf_r>:
 8001684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001686:	460e      	mov	r6, r1
 8001688:	4614      	mov	r4, r2
 800168a:	4605      	mov	r5, r0
 800168c:	b118      	cbz	r0, 8001696 <__swbuf_r+0x12>
 800168e:	6983      	ldr	r3, [r0, #24]
 8001690:	b90b      	cbnz	r3, 8001696 <__swbuf_r+0x12>
 8001692:	f000 f9a7 	bl	80019e4 <__sinit>
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <__swbuf_r+0x98>)
 8001698:	429c      	cmp	r4, r3
 800169a:	d12a      	bne.n	80016f2 <__swbuf_r+0x6e>
 800169c:	686c      	ldr	r4, [r5, #4]
 800169e:	69a3      	ldr	r3, [r4, #24]
 80016a0:	60a3      	str	r3, [r4, #8]
 80016a2:	89a3      	ldrh	r3, [r4, #12]
 80016a4:	071a      	lsls	r2, r3, #28
 80016a6:	d52e      	bpl.n	8001706 <__swbuf_r+0x82>
 80016a8:	6923      	ldr	r3, [r4, #16]
 80016aa:	b363      	cbz	r3, 8001706 <__swbuf_r+0x82>
 80016ac:	6923      	ldr	r3, [r4, #16]
 80016ae:	6820      	ldr	r0, [r4, #0]
 80016b0:	1ac0      	subs	r0, r0, r3
 80016b2:	6963      	ldr	r3, [r4, #20]
 80016b4:	b2f6      	uxtb	r6, r6
 80016b6:	4283      	cmp	r3, r0
 80016b8:	4637      	mov	r7, r6
 80016ba:	dc04      	bgt.n	80016c6 <__swbuf_r+0x42>
 80016bc:	4621      	mov	r1, r4
 80016be:	4628      	mov	r0, r5
 80016c0:	f000 f926 	bl	8001910 <_fflush_r>
 80016c4:	bb28      	cbnz	r0, 8001712 <__swbuf_r+0x8e>
 80016c6:	68a3      	ldr	r3, [r4, #8]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	60a3      	str	r3, [r4, #8]
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	6022      	str	r2, [r4, #0]
 80016d2:	701e      	strb	r6, [r3, #0]
 80016d4:	6963      	ldr	r3, [r4, #20]
 80016d6:	3001      	adds	r0, #1
 80016d8:	4283      	cmp	r3, r0
 80016da:	d004      	beq.n	80016e6 <__swbuf_r+0x62>
 80016dc:	89a3      	ldrh	r3, [r4, #12]
 80016de:	07db      	lsls	r3, r3, #31
 80016e0:	d519      	bpl.n	8001716 <__swbuf_r+0x92>
 80016e2:	2e0a      	cmp	r6, #10
 80016e4:	d117      	bne.n	8001716 <__swbuf_r+0x92>
 80016e6:	4621      	mov	r1, r4
 80016e8:	4628      	mov	r0, r5
 80016ea:	f000 f911 	bl	8001910 <_fflush_r>
 80016ee:	b190      	cbz	r0, 8001716 <__swbuf_r+0x92>
 80016f0:	e00f      	b.n	8001712 <__swbuf_r+0x8e>
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <__swbuf_r+0x9c>)
 80016f4:	429c      	cmp	r4, r3
 80016f6:	d101      	bne.n	80016fc <__swbuf_r+0x78>
 80016f8:	68ac      	ldr	r4, [r5, #8]
 80016fa:	e7d0      	b.n	800169e <__swbuf_r+0x1a>
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <__swbuf_r+0xa0>)
 80016fe:	429c      	cmp	r4, r3
 8001700:	bf08      	it	eq
 8001702:	68ec      	ldreq	r4, [r5, #12]
 8001704:	e7cb      	b.n	800169e <__swbuf_r+0x1a>
 8001706:	4621      	mov	r1, r4
 8001708:	4628      	mov	r0, r5
 800170a:	f000 f80d 	bl	8001728 <__swsetup_r>
 800170e:	2800      	cmp	r0, #0
 8001710:	d0cc      	beq.n	80016ac <__swbuf_r+0x28>
 8001712:	f04f 37ff 	mov.w	r7, #4294967295
 8001716:	4638      	mov	r0, r7
 8001718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800171a:	bf00      	nop
 800171c:	08002a48 	.word	0x08002a48
 8001720:	08002a68 	.word	0x08002a68
 8001724:	08002a28 	.word	0x08002a28

08001728 <__swsetup_r>:
 8001728:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <__swsetup_r+0xcc>)
 800172a:	b570      	push	{r4, r5, r6, lr}
 800172c:	681d      	ldr	r5, [r3, #0]
 800172e:	4606      	mov	r6, r0
 8001730:	460c      	mov	r4, r1
 8001732:	b125      	cbz	r5, 800173e <__swsetup_r+0x16>
 8001734:	69ab      	ldr	r3, [r5, #24]
 8001736:	b913      	cbnz	r3, 800173e <__swsetup_r+0x16>
 8001738:	4628      	mov	r0, r5
 800173a:	f000 f953 	bl	80019e4 <__sinit>
 800173e:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <__swsetup_r+0xd0>)
 8001740:	429c      	cmp	r4, r3
 8001742:	d10f      	bne.n	8001764 <__swsetup_r+0x3c>
 8001744:	686c      	ldr	r4, [r5, #4]
 8001746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800174a:	b29a      	uxth	r2, r3
 800174c:	0715      	lsls	r5, r2, #28
 800174e:	d42c      	bmi.n	80017aa <__swsetup_r+0x82>
 8001750:	06d0      	lsls	r0, r2, #27
 8001752:	d411      	bmi.n	8001778 <__swsetup_r+0x50>
 8001754:	2209      	movs	r2, #9
 8001756:	6032      	str	r2, [r6, #0]
 8001758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800175c:	81a3      	strh	r3, [r4, #12]
 800175e:	f04f 30ff 	mov.w	r0, #4294967295
 8001762:	e03e      	b.n	80017e2 <__swsetup_r+0xba>
 8001764:	4b25      	ldr	r3, [pc, #148]	; (80017fc <__swsetup_r+0xd4>)
 8001766:	429c      	cmp	r4, r3
 8001768:	d101      	bne.n	800176e <__swsetup_r+0x46>
 800176a:	68ac      	ldr	r4, [r5, #8]
 800176c:	e7eb      	b.n	8001746 <__swsetup_r+0x1e>
 800176e:	4b24      	ldr	r3, [pc, #144]	; (8001800 <__swsetup_r+0xd8>)
 8001770:	429c      	cmp	r4, r3
 8001772:	bf08      	it	eq
 8001774:	68ec      	ldreq	r4, [r5, #12]
 8001776:	e7e6      	b.n	8001746 <__swsetup_r+0x1e>
 8001778:	0751      	lsls	r1, r2, #29
 800177a:	d512      	bpl.n	80017a2 <__swsetup_r+0x7a>
 800177c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800177e:	b141      	cbz	r1, 8001792 <__swsetup_r+0x6a>
 8001780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001784:	4299      	cmp	r1, r3
 8001786:	d002      	beq.n	800178e <__swsetup_r+0x66>
 8001788:	4630      	mov	r0, r6
 800178a:	f000 fa19 	bl	8001bc0 <_free_r>
 800178e:	2300      	movs	r3, #0
 8001790:	6363      	str	r3, [r4, #52]	; 0x34
 8001792:	89a3      	ldrh	r3, [r4, #12]
 8001794:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001798:	81a3      	strh	r3, [r4, #12]
 800179a:	2300      	movs	r3, #0
 800179c:	6063      	str	r3, [r4, #4]
 800179e:	6923      	ldr	r3, [r4, #16]
 80017a0:	6023      	str	r3, [r4, #0]
 80017a2:	89a3      	ldrh	r3, [r4, #12]
 80017a4:	f043 0308 	orr.w	r3, r3, #8
 80017a8:	81a3      	strh	r3, [r4, #12]
 80017aa:	6923      	ldr	r3, [r4, #16]
 80017ac:	b94b      	cbnz	r3, 80017c2 <__swsetup_r+0x9a>
 80017ae:	89a3      	ldrh	r3, [r4, #12]
 80017b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80017b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017b8:	d003      	beq.n	80017c2 <__swsetup_r+0x9a>
 80017ba:	4621      	mov	r1, r4
 80017bc:	4630      	mov	r0, r6
 80017be:	f000 f9bf 	bl	8001b40 <__smakebuf_r>
 80017c2:	89a2      	ldrh	r2, [r4, #12]
 80017c4:	f012 0301 	ands.w	r3, r2, #1
 80017c8:	d00c      	beq.n	80017e4 <__swsetup_r+0xbc>
 80017ca:	2300      	movs	r3, #0
 80017cc:	60a3      	str	r3, [r4, #8]
 80017ce:	6963      	ldr	r3, [r4, #20]
 80017d0:	425b      	negs	r3, r3
 80017d2:	61a3      	str	r3, [r4, #24]
 80017d4:	6923      	ldr	r3, [r4, #16]
 80017d6:	b953      	cbnz	r3, 80017ee <__swsetup_r+0xc6>
 80017d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80017e0:	d1ba      	bne.n	8001758 <__swsetup_r+0x30>
 80017e2:	bd70      	pop	{r4, r5, r6, pc}
 80017e4:	0792      	lsls	r2, r2, #30
 80017e6:	bf58      	it	pl
 80017e8:	6963      	ldrpl	r3, [r4, #20]
 80017ea:	60a3      	str	r3, [r4, #8]
 80017ec:	e7f2      	b.n	80017d4 <__swsetup_r+0xac>
 80017ee:	2000      	movs	r0, #0
 80017f0:	e7f7      	b.n	80017e2 <__swsetup_r+0xba>
 80017f2:	bf00      	nop
 80017f4:	20000018 	.word	0x20000018
 80017f8:	08002a48 	.word	0x08002a48
 80017fc:	08002a68 	.word	0x08002a68
 8001800:	08002a28 	.word	0x08002a28

08001804 <__sflush_r>:
 8001804:	898a      	ldrh	r2, [r1, #12]
 8001806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800180a:	4605      	mov	r5, r0
 800180c:	0710      	lsls	r0, r2, #28
 800180e:	460c      	mov	r4, r1
 8001810:	d458      	bmi.n	80018c4 <__sflush_r+0xc0>
 8001812:	684b      	ldr	r3, [r1, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	dc05      	bgt.n	8001824 <__sflush_r+0x20>
 8001818:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800181a:	2b00      	cmp	r3, #0
 800181c:	dc02      	bgt.n	8001824 <__sflush_r+0x20>
 800181e:	2000      	movs	r0, #0
 8001820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001826:	2e00      	cmp	r6, #0
 8001828:	d0f9      	beq.n	800181e <__sflush_r+0x1a>
 800182a:	2300      	movs	r3, #0
 800182c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001830:	682f      	ldr	r7, [r5, #0]
 8001832:	6a21      	ldr	r1, [r4, #32]
 8001834:	602b      	str	r3, [r5, #0]
 8001836:	d032      	beq.n	800189e <__sflush_r+0x9a>
 8001838:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800183a:	89a3      	ldrh	r3, [r4, #12]
 800183c:	075a      	lsls	r2, r3, #29
 800183e:	d505      	bpl.n	800184c <__sflush_r+0x48>
 8001840:	6863      	ldr	r3, [r4, #4]
 8001842:	1ac0      	subs	r0, r0, r3
 8001844:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001846:	b10b      	cbz	r3, 800184c <__sflush_r+0x48>
 8001848:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800184a:	1ac0      	subs	r0, r0, r3
 800184c:	2300      	movs	r3, #0
 800184e:	4602      	mov	r2, r0
 8001850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001852:	6a21      	ldr	r1, [r4, #32]
 8001854:	4628      	mov	r0, r5
 8001856:	47b0      	blx	r6
 8001858:	1c43      	adds	r3, r0, #1
 800185a:	89a3      	ldrh	r3, [r4, #12]
 800185c:	d106      	bne.n	800186c <__sflush_r+0x68>
 800185e:	6829      	ldr	r1, [r5, #0]
 8001860:	291d      	cmp	r1, #29
 8001862:	d848      	bhi.n	80018f6 <__sflush_r+0xf2>
 8001864:	4a29      	ldr	r2, [pc, #164]	; (800190c <__sflush_r+0x108>)
 8001866:	40ca      	lsrs	r2, r1
 8001868:	07d6      	lsls	r6, r2, #31
 800186a:	d544      	bpl.n	80018f6 <__sflush_r+0xf2>
 800186c:	2200      	movs	r2, #0
 800186e:	6062      	str	r2, [r4, #4]
 8001870:	04d9      	lsls	r1, r3, #19
 8001872:	6922      	ldr	r2, [r4, #16]
 8001874:	6022      	str	r2, [r4, #0]
 8001876:	d504      	bpl.n	8001882 <__sflush_r+0x7e>
 8001878:	1c42      	adds	r2, r0, #1
 800187a:	d101      	bne.n	8001880 <__sflush_r+0x7c>
 800187c:	682b      	ldr	r3, [r5, #0]
 800187e:	b903      	cbnz	r3, 8001882 <__sflush_r+0x7e>
 8001880:	6560      	str	r0, [r4, #84]	; 0x54
 8001882:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001884:	602f      	str	r7, [r5, #0]
 8001886:	2900      	cmp	r1, #0
 8001888:	d0c9      	beq.n	800181e <__sflush_r+0x1a>
 800188a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800188e:	4299      	cmp	r1, r3
 8001890:	d002      	beq.n	8001898 <__sflush_r+0x94>
 8001892:	4628      	mov	r0, r5
 8001894:	f000 f994 	bl	8001bc0 <_free_r>
 8001898:	2000      	movs	r0, #0
 800189a:	6360      	str	r0, [r4, #52]	; 0x34
 800189c:	e7c0      	b.n	8001820 <__sflush_r+0x1c>
 800189e:	2301      	movs	r3, #1
 80018a0:	4628      	mov	r0, r5
 80018a2:	47b0      	blx	r6
 80018a4:	1c41      	adds	r1, r0, #1
 80018a6:	d1c8      	bne.n	800183a <__sflush_r+0x36>
 80018a8:	682b      	ldr	r3, [r5, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0c5      	beq.n	800183a <__sflush_r+0x36>
 80018ae:	2b1d      	cmp	r3, #29
 80018b0:	d001      	beq.n	80018b6 <__sflush_r+0xb2>
 80018b2:	2b16      	cmp	r3, #22
 80018b4:	d101      	bne.n	80018ba <__sflush_r+0xb6>
 80018b6:	602f      	str	r7, [r5, #0]
 80018b8:	e7b1      	b.n	800181e <__sflush_r+0x1a>
 80018ba:	89a3      	ldrh	r3, [r4, #12]
 80018bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018c0:	81a3      	strh	r3, [r4, #12]
 80018c2:	e7ad      	b.n	8001820 <__sflush_r+0x1c>
 80018c4:	690f      	ldr	r7, [r1, #16]
 80018c6:	2f00      	cmp	r7, #0
 80018c8:	d0a9      	beq.n	800181e <__sflush_r+0x1a>
 80018ca:	0793      	lsls	r3, r2, #30
 80018cc:	680e      	ldr	r6, [r1, #0]
 80018ce:	bf08      	it	eq
 80018d0:	694b      	ldreq	r3, [r1, #20]
 80018d2:	600f      	str	r7, [r1, #0]
 80018d4:	bf18      	it	ne
 80018d6:	2300      	movne	r3, #0
 80018d8:	eba6 0807 	sub.w	r8, r6, r7
 80018dc:	608b      	str	r3, [r1, #8]
 80018de:	f1b8 0f00 	cmp.w	r8, #0
 80018e2:	dd9c      	ble.n	800181e <__sflush_r+0x1a>
 80018e4:	4643      	mov	r3, r8
 80018e6:	463a      	mov	r2, r7
 80018e8:	6a21      	ldr	r1, [r4, #32]
 80018ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80018ec:	4628      	mov	r0, r5
 80018ee:	47b0      	blx	r6
 80018f0:	2800      	cmp	r0, #0
 80018f2:	dc06      	bgt.n	8001902 <__sflush_r+0xfe>
 80018f4:	89a3      	ldrh	r3, [r4, #12]
 80018f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018fa:	81a3      	strh	r3, [r4, #12]
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	e78e      	b.n	8001820 <__sflush_r+0x1c>
 8001902:	4407      	add	r7, r0
 8001904:	eba8 0800 	sub.w	r8, r8, r0
 8001908:	e7e9      	b.n	80018de <__sflush_r+0xda>
 800190a:	bf00      	nop
 800190c:	20400001 	.word	0x20400001

08001910 <_fflush_r>:
 8001910:	b538      	push	{r3, r4, r5, lr}
 8001912:	690b      	ldr	r3, [r1, #16]
 8001914:	4605      	mov	r5, r0
 8001916:	460c      	mov	r4, r1
 8001918:	b1db      	cbz	r3, 8001952 <_fflush_r+0x42>
 800191a:	b118      	cbz	r0, 8001924 <_fflush_r+0x14>
 800191c:	6983      	ldr	r3, [r0, #24]
 800191e:	b90b      	cbnz	r3, 8001924 <_fflush_r+0x14>
 8001920:	f000 f860 	bl	80019e4 <__sinit>
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <_fflush_r+0x48>)
 8001926:	429c      	cmp	r4, r3
 8001928:	d109      	bne.n	800193e <_fflush_r+0x2e>
 800192a:	686c      	ldr	r4, [r5, #4]
 800192c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001930:	b17b      	cbz	r3, 8001952 <_fflush_r+0x42>
 8001932:	4621      	mov	r1, r4
 8001934:	4628      	mov	r0, r5
 8001936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800193a:	f7ff bf63 	b.w	8001804 <__sflush_r>
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <_fflush_r+0x4c>)
 8001940:	429c      	cmp	r4, r3
 8001942:	d101      	bne.n	8001948 <_fflush_r+0x38>
 8001944:	68ac      	ldr	r4, [r5, #8]
 8001946:	e7f1      	b.n	800192c <_fflush_r+0x1c>
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <_fflush_r+0x50>)
 800194a:	429c      	cmp	r4, r3
 800194c:	bf08      	it	eq
 800194e:	68ec      	ldreq	r4, [r5, #12]
 8001950:	e7ec      	b.n	800192c <_fflush_r+0x1c>
 8001952:	2000      	movs	r0, #0
 8001954:	bd38      	pop	{r3, r4, r5, pc}
 8001956:	bf00      	nop
 8001958:	08002a48 	.word	0x08002a48
 800195c:	08002a68 	.word	0x08002a68
 8001960:	08002a28 	.word	0x08002a28

08001964 <std>:
 8001964:	2300      	movs	r3, #0
 8001966:	b510      	push	{r4, lr}
 8001968:	4604      	mov	r4, r0
 800196a:	e9c0 3300 	strd	r3, r3, [r0]
 800196e:	6083      	str	r3, [r0, #8]
 8001970:	8181      	strh	r1, [r0, #12]
 8001972:	6643      	str	r3, [r0, #100]	; 0x64
 8001974:	81c2      	strh	r2, [r0, #14]
 8001976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800197a:	6183      	str	r3, [r0, #24]
 800197c:	4619      	mov	r1, r3
 800197e:	2208      	movs	r2, #8
 8001980:	305c      	adds	r0, #92	; 0x5c
 8001982:	f7ff fdfb 	bl	800157c <memset>
 8001986:	4b05      	ldr	r3, [pc, #20]	; (800199c <std+0x38>)
 8001988:	6263      	str	r3, [r4, #36]	; 0x24
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <std+0x3c>)
 800198c:	62a3      	str	r3, [r4, #40]	; 0x28
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <std+0x40>)
 8001990:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <std+0x44>)
 8001994:	6224      	str	r4, [r4, #32]
 8001996:	6323      	str	r3, [r4, #48]	; 0x30
 8001998:	bd10      	pop	{r4, pc}
 800199a:	bf00      	nop
 800199c:	080022c1 	.word	0x080022c1
 80019a0:	080022e3 	.word	0x080022e3
 80019a4:	0800231b 	.word	0x0800231b
 80019a8:	0800233f 	.word	0x0800233f

080019ac <_cleanup_r>:
 80019ac:	4901      	ldr	r1, [pc, #4]	; (80019b4 <_cleanup_r+0x8>)
 80019ae:	f000 b885 	b.w	8001abc <_fwalk_reent>
 80019b2:	bf00      	nop
 80019b4:	08001911 	.word	0x08001911

080019b8 <__sfmoreglue>:
 80019b8:	b570      	push	{r4, r5, r6, lr}
 80019ba:	1e4a      	subs	r2, r1, #1
 80019bc:	2568      	movs	r5, #104	; 0x68
 80019be:	4355      	muls	r5, r2
 80019c0:	460e      	mov	r6, r1
 80019c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80019c6:	f000 f949 	bl	8001c5c <_malloc_r>
 80019ca:	4604      	mov	r4, r0
 80019cc:	b140      	cbz	r0, 80019e0 <__sfmoreglue+0x28>
 80019ce:	2100      	movs	r1, #0
 80019d0:	e9c0 1600 	strd	r1, r6, [r0]
 80019d4:	300c      	adds	r0, #12
 80019d6:	60a0      	str	r0, [r4, #8]
 80019d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80019dc:	f7ff fdce 	bl	800157c <memset>
 80019e0:	4620      	mov	r0, r4
 80019e2:	bd70      	pop	{r4, r5, r6, pc}

080019e4 <__sinit>:
 80019e4:	6983      	ldr	r3, [r0, #24]
 80019e6:	b510      	push	{r4, lr}
 80019e8:	4604      	mov	r4, r0
 80019ea:	bb33      	cbnz	r3, 8001a3a <__sinit+0x56>
 80019ec:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80019f0:	6503      	str	r3, [r0, #80]	; 0x50
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <__sinit+0x58>)
 80019f4:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <__sinit+0x5c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6282      	str	r2, [r0, #40]	; 0x28
 80019fa:	4298      	cmp	r0, r3
 80019fc:	bf04      	itt	eq
 80019fe:	2301      	moveq	r3, #1
 8001a00:	6183      	streq	r3, [r0, #24]
 8001a02:	f000 f81f 	bl	8001a44 <__sfp>
 8001a06:	6060      	str	r0, [r4, #4]
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f000 f81b 	bl	8001a44 <__sfp>
 8001a0e:	60a0      	str	r0, [r4, #8]
 8001a10:	4620      	mov	r0, r4
 8001a12:	f000 f817 	bl	8001a44 <__sfp>
 8001a16:	2200      	movs	r2, #0
 8001a18:	60e0      	str	r0, [r4, #12]
 8001a1a:	2104      	movs	r1, #4
 8001a1c:	6860      	ldr	r0, [r4, #4]
 8001a1e:	f7ff ffa1 	bl	8001964 <std>
 8001a22:	2201      	movs	r2, #1
 8001a24:	2109      	movs	r1, #9
 8001a26:	68a0      	ldr	r0, [r4, #8]
 8001a28:	f7ff ff9c 	bl	8001964 <std>
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	2112      	movs	r1, #18
 8001a30:	68e0      	ldr	r0, [r4, #12]
 8001a32:	f7ff ff97 	bl	8001964 <std>
 8001a36:	2301      	movs	r3, #1
 8001a38:	61a3      	str	r3, [r4, #24]
 8001a3a:	bd10      	pop	{r4, pc}
 8001a3c:	08002a24 	.word	0x08002a24
 8001a40:	080019ad 	.word	0x080019ad

08001a44 <__sfp>:
 8001a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a46:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <__sfp+0x70>)
 8001a48:	681e      	ldr	r6, [r3, #0]
 8001a4a:	69b3      	ldr	r3, [r6, #24]
 8001a4c:	4607      	mov	r7, r0
 8001a4e:	b913      	cbnz	r3, 8001a56 <__sfp+0x12>
 8001a50:	4630      	mov	r0, r6
 8001a52:	f7ff ffc7 	bl	80019e4 <__sinit>
 8001a56:	3648      	adds	r6, #72	; 0x48
 8001a58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	d503      	bpl.n	8001a68 <__sfp+0x24>
 8001a60:	6833      	ldr	r3, [r6, #0]
 8001a62:	b133      	cbz	r3, 8001a72 <__sfp+0x2e>
 8001a64:	6836      	ldr	r6, [r6, #0]
 8001a66:	e7f7      	b.n	8001a58 <__sfp+0x14>
 8001a68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001a6c:	b16d      	cbz	r5, 8001a8a <__sfp+0x46>
 8001a6e:	3468      	adds	r4, #104	; 0x68
 8001a70:	e7f4      	b.n	8001a5c <__sfp+0x18>
 8001a72:	2104      	movs	r1, #4
 8001a74:	4638      	mov	r0, r7
 8001a76:	f7ff ff9f 	bl	80019b8 <__sfmoreglue>
 8001a7a:	6030      	str	r0, [r6, #0]
 8001a7c:	2800      	cmp	r0, #0
 8001a7e:	d1f1      	bne.n	8001a64 <__sfp+0x20>
 8001a80:	230c      	movs	r3, #12
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	4604      	mov	r4, r0
 8001a86:	4620      	mov	r0, r4
 8001a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <__sfp+0x74>)
 8001a8c:	6665      	str	r5, [r4, #100]	; 0x64
 8001a8e:	e9c4 5500 	strd	r5, r5, [r4]
 8001a92:	60a5      	str	r5, [r4, #8]
 8001a94:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001a98:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001a9c:	2208      	movs	r2, #8
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001aa4:	f7ff fd6a 	bl	800157c <memset>
 8001aa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001aac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001ab0:	e7e9      	b.n	8001a86 <__sfp+0x42>
 8001ab2:	bf00      	nop
 8001ab4:	08002a24 	.word	0x08002a24
 8001ab8:	ffff0001 	.word	0xffff0001

08001abc <_fwalk_reent>:
 8001abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ac0:	4680      	mov	r8, r0
 8001ac2:	4689      	mov	r9, r1
 8001ac4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001ac8:	2600      	movs	r6, #0
 8001aca:	b914      	cbnz	r4, 8001ad2 <_fwalk_reent+0x16>
 8001acc:	4630      	mov	r0, r6
 8001ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ad2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001ad6:	3f01      	subs	r7, #1
 8001ad8:	d501      	bpl.n	8001ade <_fwalk_reent+0x22>
 8001ada:	6824      	ldr	r4, [r4, #0]
 8001adc:	e7f5      	b.n	8001aca <_fwalk_reent+0xe>
 8001ade:	89ab      	ldrh	r3, [r5, #12]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d907      	bls.n	8001af4 <_fwalk_reent+0x38>
 8001ae4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	d003      	beq.n	8001af4 <_fwalk_reent+0x38>
 8001aec:	4629      	mov	r1, r5
 8001aee:	4640      	mov	r0, r8
 8001af0:	47c8      	blx	r9
 8001af2:	4306      	orrs	r6, r0
 8001af4:	3568      	adds	r5, #104	; 0x68
 8001af6:	e7ee      	b.n	8001ad6 <_fwalk_reent+0x1a>

08001af8 <__swhatbuf_r>:
 8001af8:	b570      	push	{r4, r5, r6, lr}
 8001afa:	460e      	mov	r6, r1
 8001afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b00:	2900      	cmp	r1, #0
 8001b02:	b096      	sub	sp, #88	; 0x58
 8001b04:	4614      	mov	r4, r2
 8001b06:	461d      	mov	r5, r3
 8001b08:	da07      	bge.n	8001b1a <__swhatbuf_r+0x22>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	602b      	str	r3, [r5, #0]
 8001b0e:	89b3      	ldrh	r3, [r6, #12]
 8001b10:	061a      	lsls	r2, r3, #24
 8001b12:	d410      	bmi.n	8001b36 <__swhatbuf_r+0x3e>
 8001b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b18:	e00e      	b.n	8001b38 <__swhatbuf_r+0x40>
 8001b1a:	466a      	mov	r2, sp
 8001b1c:	f000 fc36 	bl	800238c <_fstat_r>
 8001b20:	2800      	cmp	r0, #0
 8001b22:	dbf2      	blt.n	8001b0a <__swhatbuf_r+0x12>
 8001b24:	9a01      	ldr	r2, [sp, #4]
 8001b26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001b2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001b2e:	425a      	negs	r2, r3
 8001b30:	415a      	adcs	r2, r3
 8001b32:	602a      	str	r2, [r5, #0]
 8001b34:	e7ee      	b.n	8001b14 <__swhatbuf_r+0x1c>
 8001b36:	2340      	movs	r3, #64	; 0x40
 8001b38:	2000      	movs	r0, #0
 8001b3a:	6023      	str	r3, [r4, #0]
 8001b3c:	b016      	add	sp, #88	; 0x58
 8001b3e:	bd70      	pop	{r4, r5, r6, pc}

08001b40 <__smakebuf_r>:
 8001b40:	898b      	ldrh	r3, [r1, #12]
 8001b42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b44:	079d      	lsls	r5, r3, #30
 8001b46:	4606      	mov	r6, r0
 8001b48:	460c      	mov	r4, r1
 8001b4a:	d507      	bpl.n	8001b5c <__smakebuf_r+0x1c>
 8001b4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001b50:	6023      	str	r3, [r4, #0]
 8001b52:	6123      	str	r3, [r4, #16]
 8001b54:	2301      	movs	r3, #1
 8001b56:	6163      	str	r3, [r4, #20]
 8001b58:	b002      	add	sp, #8
 8001b5a:	bd70      	pop	{r4, r5, r6, pc}
 8001b5c:	ab01      	add	r3, sp, #4
 8001b5e:	466a      	mov	r2, sp
 8001b60:	f7ff ffca 	bl	8001af8 <__swhatbuf_r>
 8001b64:	9900      	ldr	r1, [sp, #0]
 8001b66:	4605      	mov	r5, r0
 8001b68:	4630      	mov	r0, r6
 8001b6a:	f000 f877 	bl	8001c5c <_malloc_r>
 8001b6e:	b948      	cbnz	r0, 8001b84 <__smakebuf_r+0x44>
 8001b70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b74:	059a      	lsls	r2, r3, #22
 8001b76:	d4ef      	bmi.n	8001b58 <__smakebuf_r+0x18>
 8001b78:	f023 0303 	bic.w	r3, r3, #3
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	81a3      	strh	r3, [r4, #12]
 8001b82:	e7e3      	b.n	8001b4c <__smakebuf_r+0xc>
 8001b84:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <__smakebuf_r+0x7c>)
 8001b86:	62b3      	str	r3, [r6, #40]	; 0x28
 8001b88:	89a3      	ldrh	r3, [r4, #12]
 8001b8a:	6020      	str	r0, [r4, #0]
 8001b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b90:	81a3      	strh	r3, [r4, #12]
 8001b92:	9b00      	ldr	r3, [sp, #0]
 8001b94:	6163      	str	r3, [r4, #20]
 8001b96:	9b01      	ldr	r3, [sp, #4]
 8001b98:	6120      	str	r0, [r4, #16]
 8001b9a:	b15b      	cbz	r3, 8001bb4 <__smakebuf_r+0x74>
 8001b9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ba0:	4630      	mov	r0, r6
 8001ba2:	f000 fc05 	bl	80023b0 <_isatty_r>
 8001ba6:	b128      	cbz	r0, 8001bb4 <__smakebuf_r+0x74>
 8001ba8:	89a3      	ldrh	r3, [r4, #12]
 8001baa:	f023 0303 	bic.w	r3, r3, #3
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	81a3      	strh	r3, [r4, #12]
 8001bb4:	89a3      	ldrh	r3, [r4, #12]
 8001bb6:	431d      	orrs	r5, r3
 8001bb8:	81a5      	strh	r5, [r4, #12]
 8001bba:	e7cd      	b.n	8001b58 <__smakebuf_r+0x18>
 8001bbc:	080019ad 	.word	0x080019ad

08001bc0 <_free_r>:
 8001bc0:	b538      	push	{r3, r4, r5, lr}
 8001bc2:	4605      	mov	r5, r0
 8001bc4:	2900      	cmp	r1, #0
 8001bc6:	d045      	beq.n	8001c54 <_free_r+0x94>
 8001bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001bcc:	1f0c      	subs	r4, r1, #4
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bfb8      	it	lt
 8001bd2:	18e4      	addlt	r4, r4, r3
 8001bd4:	f000 fc0e 	bl	80023f4 <__malloc_lock>
 8001bd8:	4a1f      	ldr	r2, [pc, #124]	; (8001c58 <_free_r+0x98>)
 8001bda:	6813      	ldr	r3, [r2, #0]
 8001bdc:	4610      	mov	r0, r2
 8001bde:	b933      	cbnz	r3, 8001bee <_free_r+0x2e>
 8001be0:	6063      	str	r3, [r4, #4]
 8001be2:	6014      	str	r4, [r2, #0]
 8001be4:	4628      	mov	r0, r5
 8001be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bea:	f000 bc04 	b.w	80023f6 <__malloc_unlock>
 8001bee:	42a3      	cmp	r3, r4
 8001bf0:	d90c      	bls.n	8001c0c <_free_r+0x4c>
 8001bf2:	6821      	ldr	r1, [r4, #0]
 8001bf4:	1862      	adds	r2, r4, r1
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	bf04      	itt	eq
 8001bfa:	681a      	ldreq	r2, [r3, #0]
 8001bfc:	685b      	ldreq	r3, [r3, #4]
 8001bfe:	6063      	str	r3, [r4, #4]
 8001c00:	bf04      	itt	eq
 8001c02:	1852      	addeq	r2, r2, r1
 8001c04:	6022      	streq	r2, [r4, #0]
 8001c06:	6004      	str	r4, [r0, #0]
 8001c08:	e7ec      	b.n	8001be4 <_free_r+0x24>
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	b10a      	cbz	r2, 8001c14 <_free_r+0x54>
 8001c10:	42a2      	cmp	r2, r4
 8001c12:	d9fa      	bls.n	8001c0a <_free_r+0x4a>
 8001c14:	6819      	ldr	r1, [r3, #0]
 8001c16:	1858      	adds	r0, r3, r1
 8001c18:	42a0      	cmp	r0, r4
 8001c1a:	d10b      	bne.n	8001c34 <_free_r+0x74>
 8001c1c:	6820      	ldr	r0, [r4, #0]
 8001c1e:	4401      	add	r1, r0
 8001c20:	1858      	adds	r0, r3, r1
 8001c22:	4282      	cmp	r2, r0
 8001c24:	6019      	str	r1, [r3, #0]
 8001c26:	d1dd      	bne.n	8001be4 <_free_r+0x24>
 8001c28:	6810      	ldr	r0, [r2, #0]
 8001c2a:	6852      	ldr	r2, [r2, #4]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	4401      	add	r1, r0
 8001c30:	6019      	str	r1, [r3, #0]
 8001c32:	e7d7      	b.n	8001be4 <_free_r+0x24>
 8001c34:	d902      	bls.n	8001c3c <_free_r+0x7c>
 8001c36:	230c      	movs	r3, #12
 8001c38:	602b      	str	r3, [r5, #0]
 8001c3a:	e7d3      	b.n	8001be4 <_free_r+0x24>
 8001c3c:	6820      	ldr	r0, [r4, #0]
 8001c3e:	1821      	adds	r1, r4, r0
 8001c40:	428a      	cmp	r2, r1
 8001c42:	bf04      	itt	eq
 8001c44:	6811      	ldreq	r1, [r2, #0]
 8001c46:	6852      	ldreq	r2, [r2, #4]
 8001c48:	6062      	str	r2, [r4, #4]
 8001c4a:	bf04      	itt	eq
 8001c4c:	1809      	addeq	r1, r1, r0
 8001c4e:	6021      	streq	r1, [r4, #0]
 8001c50:	605c      	str	r4, [r3, #4]
 8001c52:	e7c7      	b.n	8001be4 <_free_r+0x24>
 8001c54:	bd38      	pop	{r3, r4, r5, pc}
 8001c56:	bf00      	nop
 8001c58:	200000a8 	.word	0x200000a8

08001c5c <_malloc_r>:
 8001c5c:	b570      	push	{r4, r5, r6, lr}
 8001c5e:	1ccd      	adds	r5, r1, #3
 8001c60:	f025 0503 	bic.w	r5, r5, #3
 8001c64:	3508      	adds	r5, #8
 8001c66:	2d0c      	cmp	r5, #12
 8001c68:	bf38      	it	cc
 8001c6a:	250c      	movcc	r5, #12
 8001c6c:	2d00      	cmp	r5, #0
 8001c6e:	4606      	mov	r6, r0
 8001c70:	db01      	blt.n	8001c76 <_malloc_r+0x1a>
 8001c72:	42a9      	cmp	r1, r5
 8001c74:	d903      	bls.n	8001c7e <_malloc_r+0x22>
 8001c76:	230c      	movs	r3, #12
 8001c78:	6033      	str	r3, [r6, #0]
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	bd70      	pop	{r4, r5, r6, pc}
 8001c7e:	f000 fbb9 	bl	80023f4 <__malloc_lock>
 8001c82:	4a21      	ldr	r2, [pc, #132]	; (8001d08 <_malloc_r+0xac>)
 8001c84:	6814      	ldr	r4, [r2, #0]
 8001c86:	4621      	mov	r1, r4
 8001c88:	b991      	cbnz	r1, 8001cb0 <_malloc_r+0x54>
 8001c8a:	4c20      	ldr	r4, [pc, #128]	; (8001d0c <_malloc_r+0xb0>)
 8001c8c:	6823      	ldr	r3, [r4, #0]
 8001c8e:	b91b      	cbnz	r3, 8001c98 <_malloc_r+0x3c>
 8001c90:	4630      	mov	r0, r6
 8001c92:	f000 fb05 	bl	80022a0 <_sbrk_r>
 8001c96:	6020      	str	r0, [r4, #0]
 8001c98:	4629      	mov	r1, r5
 8001c9a:	4630      	mov	r0, r6
 8001c9c:	f000 fb00 	bl	80022a0 <_sbrk_r>
 8001ca0:	1c43      	adds	r3, r0, #1
 8001ca2:	d124      	bne.n	8001cee <_malloc_r+0x92>
 8001ca4:	230c      	movs	r3, #12
 8001ca6:	6033      	str	r3, [r6, #0]
 8001ca8:	4630      	mov	r0, r6
 8001caa:	f000 fba4 	bl	80023f6 <__malloc_unlock>
 8001cae:	e7e4      	b.n	8001c7a <_malloc_r+0x1e>
 8001cb0:	680b      	ldr	r3, [r1, #0]
 8001cb2:	1b5b      	subs	r3, r3, r5
 8001cb4:	d418      	bmi.n	8001ce8 <_malloc_r+0x8c>
 8001cb6:	2b0b      	cmp	r3, #11
 8001cb8:	d90f      	bls.n	8001cda <_malloc_r+0x7e>
 8001cba:	600b      	str	r3, [r1, #0]
 8001cbc:	50cd      	str	r5, [r1, r3]
 8001cbe:	18cc      	adds	r4, r1, r3
 8001cc0:	4630      	mov	r0, r6
 8001cc2:	f000 fb98 	bl	80023f6 <__malloc_unlock>
 8001cc6:	f104 000b 	add.w	r0, r4, #11
 8001cca:	1d23      	adds	r3, r4, #4
 8001ccc:	f020 0007 	bic.w	r0, r0, #7
 8001cd0:	1ac3      	subs	r3, r0, r3
 8001cd2:	d0d3      	beq.n	8001c7c <_malloc_r+0x20>
 8001cd4:	425a      	negs	r2, r3
 8001cd6:	50e2      	str	r2, [r4, r3]
 8001cd8:	e7d0      	b.n	8001c7c <_malloc_r+0x20>
 8001cda:	428c      	cmp	r4, r1
 8001cdc:	684b      	ldr	r3, [r1, #4]
 8001cde:	bf16      	itet	ne
 8001ce0:	6063      	strne	r3, [r4, #4]
 8001ce2:	6013      	streq	r3, [r2, #0]
 8001ce4:	460c      	movne	r4, r1
 8001ce6:	e7eb      	b.n	8001cc0 <_malloc_r+0x64>
 8001ce8:	460c      	mov	r4, r1
 8001cea:	6849      	ldr	r1, [r1, #4]
 8001cec:	e7cc      	b.n	8001c88 <_malloc_r+0x2c>
 8001cee:	1cc4      	adds	r4, r0, #3
 8001cf0:	f024 0403 	bic.w	r4, r4, #3
 8001cf4:	42a0      	cmp	r0, r4
 8001cf6:	d005      	beq.n	8001d04 <_malloc_r+0xa8>
 8001cf8:	1a21      	subs	r1, r4, r0
 8001cfa:	4630      	mov	r0, r6
 8001cfc:	f000 fad0 	bl	80022a0 <_sbrk_r>
 8001d00:	3001      	adds	r0, #1
 8001d02:	d0cf      	beq.n	8001ca4 <_malloc_r+0x48>
 8001d04:	6025      	str	r5, [r4, #0]
 8001d06:	e7db      	b.n	8001cc0 <_malloc_r+0x64>
 8001d08:	200000a8 	.word	0x200000a8
 8001d0c:	200000ac 	.word	0x200000ac

08001d10 <__sfputc_r>:
 8001d10:	6893      	ldr	r3, [r2, #8]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	b410      	push	{r4}
 8001d18:	6093      	str	r3, [r2, #8]
 8001d1a:	da08      	bge.n	8001d2e <__sfputc_r+0x1e>
 8001d1c:	6994      	ldr	r4, [r2, #24]
 8001d1e:	42a3      	cmp	r3, r4
 8001d20:	db01      	blt.n	8001d26 <__sfputc_r+0x16>
 8001d22:	290a      	cmp	r1, #10
 8001d24:	d103      	bne.n	8001d2e <__sfputc_r+0x1e>
 8001d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d2a:	f7ff bcab 	b.w	8001684 <__swbuf_r>
 8001d2e:	6813      	ldr	r3, [r2, #0]
 8001d30:	1c58      	adds	r0, r3, #1
 8001d32:	6010      	str	r0, [r2, #0]
 8001d34:	7019      	strb	r1, [r3, #0]
 8001d36:	4608      	mov	r0, r1
 8001d38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <__sfputs_r>:
 8001d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d40:	4606      	mov	r6, r0
 8001d42:	460f      	mov	r7, r1
 8001d44:	4614      	mov	r4, r2
 8001d46:	18d5      	adds	r5, r2, r3
 8001d48:	42ac      	cmp	r4, r5
 8001d4a:	d101      	bne.n	8001d50 <__sfputs_r+0x12>
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	e007      	b.n	8001d60 <__sfputs_r+0x22>
 8001d50:	463a      	mov	r2, r7
 8001d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d56:	4630      	mov	r0, r6
 8001d58:	f7ff ffda 	bl	8001d10 <__sfputc_r>
 8001d5c:	1c43      	adds	r3, r0, #1
 8001d5e:	d1f3      	bne.n	8001d48 <__sfputs_r+0xa>
 8001d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d64 <_vfiprintf_r>:
 8001d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d68:	460c      	mov	r4, r1
 8001d6a:	b09d      	sub	sp, #116	; 0x74
 8001d6c:	4617      	mov	r7, r2
 8001d6e:	461d      	mov	r5, r3
 8001d70:	4606      	mov	r6, r0
 8001d72:	b118      	cbz	r0, 8001d7c <_vfiprintf_r+0x18>
 8001d74:	6983      	ldr	r3, [r0, #24]
 8001d76:	b90b      	cbnz	r3, 8001d7c <_vfiprintf_r+0x18>
 8001d78:	f7ff fe34 	bl	80019e4 <__sinit>
 8001d7c:	4b7c      	ldr	r3, [pc, #496]	; (8001f70 <_vfiprintf_r+0x20c>)
 8001d7e:	429c      	cmp	r4, r3
 8001d80:	d158      	bne.n	8001e34 <_vfiprintf_r+0xd0>
 8001d82:	6874      	ldr	r4, [r6, #4]
 8001d84:	89a3      	ldrh	r3, [r4, #12]
 8001d86:	0718      	lsls	r0, r3, #28
 8001d88:	d55e      	bpl.n	8001e48 <_vfiprintf_r+0xe4>
 8001d8a:	6923      	ldr	r3, [r4, #16]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d05b      	beq.n	8001e48 <_vfiprintf_r+0xe4>
 8001d90:	2300      	movs	r3, #0
 8001d92:	9309      	str	r3, [sp, #36]	; 0x24
 8001d94:	2320      	movs	r3, #32
 8001d96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d9a:	2330      	movs	r3, #48	; 0x30
 8001d9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001da0:	9503      	str	r5, [sp, #12]
 8001da2:	f04f 0b01 	mov.w	fp, #1
 8001da6:	46b8      	mov	r8, r7
 8001da8:	4645      	mov	r5, r8
 8001daa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001dae:	b10b      	cbz	r3, 8001db4 <_vfiprintf_r+0x50>
 8001db0:	2b25      	cmp	r3, #37	; 0x25
 8001db2:	d154      	bne.n	8001e5e <_vfiprintf_r+0xfa>
 8001db4:	ebb8 0a07 	subs.w	sl, r8, r7
 8001db8:	d00b      	beq.n	8001dd2 <_vfiprintf_r+0x6e>
 8001dba:	4653      	mov	r3, sl
 8001dbc:	463a      	mov	r2, r7
 8001dbe:	4621      	mov	r1, r4
 8001dc0:	4630      	mov	r0, r6
 8001dc2:	f7ff ffbc 	bl	8001d3e <__sfputs_r>
 8001dc6:	3001      	adds	r0, #1
 8001dc8:	f000 80c2 	beq.w	8001f50 <_vfiprintf_r+0x1ec>
 8001dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001dce:	4453      	add	r3, sl
 8001dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8001dd2:	f898 3000 	ldrb.w	r3, [r8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 80ba 	beq.w	8001f50 <_vfiprintf_r+0x1ec>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f04f 32ff 	mov.w	r2, #4294967295
 8001de2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001de6:	9304      	str	r3, [sp, #16]
 8001de8:	9307      	str	r3, [sp, #28]
 8001dea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001dee:	931a      	str	r3, [sp, #104]	; 0x68
 8001df0:	46a8      	mov	r8, r5
 8001df2:	2205      	movs	r2, #5
 8001df4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001df8:	485e      	ldr	r0, [pc, #376]	; (8001f74 <_vfiprintf_r+0x210>)
 8001dfa:	f7fe f9f1 	bl	80001e0 <memchr>
 8001dfe:	9b04      	ldr	r3, [sp, #16]
 8001e00:	bb78      	cbnz	r0, 8001e62 <_vfiprintf_r+0xfe>
 8001e02:	06d9      	lsls	r1, r3, #27
 8001e04:	bf44      	itt	mi
 8001e06:	2220      	movmi	r2, #32
 8001e08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001e0c:	071a      	lsls	r2, r3, #28
 8001e0e:	bf44      	itt	mi
 8001e10:	222b      	movmi	r2, #43	; 0x2b
 8001e12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001e16:	782a      	ldrb	r2, [r5, #0]
 8001e18:	2a2a      	cmp	r2, #42	; 0x2a
 8001e1a:	d02a      	beq.n	8001e72 <_vfiprintf_r+0x10e>
 8001e1c:	9a07      	ldr	r2, [sp, #28]
 8001e1e:	46a8      	mov	r8, r5
 8001e20:	2000      	movs	r0, #0
 8001e22:	250a      	movs	r5, #10
 8001e24:	4641      	mov	r1, r8
 8001e26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e2a:	3b30      	subs	r3, #48	; 0x30
 8001e2c:	2b09      	cmp	r3, #9
 8001e2e:	d969      	bls.n	8001f04 <_vfiprintf_r+0x1a0>
 8001e30:	b360      	cbz	r0, 8001e8c <_vfiprintf_r+0x128>
 8001e32:	e024      	b.n	8001e7e <_vfiprintf_r+0x11a>
 8001e34:	4b50      	ldr	r3, [pc, #320]	; (8001f78 <_vfiprintf_r+0x214>)
 8001e36:	429c      	cmp	r4, r3
 8001e38:	d101      	bne.n	8001e3e <_vfiprintf_r+0xda>
 8001e3a:	68b4      	ldr	r4, [r6, #8]
 8001e3c:	e7a2      	b.n	8001d84 <_vfiprintf_r+0x20>
 8001e3e:	4b4f      	ldr	r3, [pc, #316]	; (8001f7c <_vfiprintf_r+0x218>)
 8001e40:	429c      	cmp	r4, r3
 8001e42:	bf08      	it	eq
 8001e44:	68f4      	ldreq	r4, [r6, #12]
 8001e46:	e79d      	b.n	8001d84 <_vfiprintf_r+0x20>
 8001e48:	4621      	mov	r1, r4
 8001e4a:	4630      	mov	r0, r6
 8001e4c:	f7ff fc6c 	bl	8001728 <__swsetup_r>
 8001e50:	2800      	cmp	r0, #0
 8001e52:	d09d      	beq.n	8001d90 <_vfiprintf_r+0x2c>
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295
 8001e58:	b01d      	add	sp, #116	; 0x74
 8001e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e5e:	46a8      	mov	r8, r5
 8001e60:	e7a2      	b.n	8001da8 <_vfiprintf_r+0x44>
 8001e62:	4a44      	ldr	r2, [pc, #272]	; (8001f74 <_vfiprintf_r+0x210>)
 8001e64:	1a80      	subs	r0, r0, r2
 8001e66:	fa0b f000 	lsl.w	r0, fp, r0
 8001e6a:	4318      	orrs	r0, r3
 8001e6c:	9004      	str	r0, [sp, #16]
 8001e6e:	4645      	mov	r5, r8
 8001e70:	e7be      	b.n	8001df0 <_vfiprintf_r+0x8c>
 8001e72:	9a03      	ldr	r2, [sp, #12]
 8001e74:	1d11      	adds	r1, r2, #4
 8001e76:	6812      	ldr	r2, [r2, #0]
 8001e78:	9103      	str	r1, [sp, #12]
 8001e7a:	2a00      	cmp	r2, #0
 8001e7c:	db01      	blt.n	8001e82 <_vfiprintf_r+0x11e>
 8001e7e:	9207      	str	r2, [sp, #28]
 8001e80:	e004      	b.n	8001e8c <_vfiprintf_r+0x128>
 8001e82:	4252      	negs	r2, r2
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	9207      	str	r2, [sp, #28]
 8001e8a:	9304      	str	r3, [sp, #16]
 8001e8c:	f898 3000 	ldrb.w	r3, [r8]
 8001e90:	2b2e      	cmp	r3, #46	; 0x2e
 8001e92:	d10e      	bne.n	8001eb2 <_vfiprintf_r+0x14e>
 8001e94:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001e98:	2b2a      	cmp	r3, #42	; 0x2a
 8001e9a:	d138      	bne.n	8001f0e <_vfiprintf_r+0x1aa>
 8001e9c:	9b03      	ldr	r3, [sp, #12]
 8001e9e:	1d1a      	adds	r2, r3, #4
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	9203      	str	r2, [sp, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bfb8      	it	lt
 8001ea8:	f04f 33ff 	movlt.w	r3, #4294967295
 8001eac:	f108 0802 	add.w	r8, r8, #2
 8001eb0:	9305      	str	r3, [sp, #20]
 8001eb2:	4d33      	ldr	r5, [pc, #204]	; (8001f80 <_vfiprintf_r+0x21c>)
 8001eb4:	f898 1000 	ldrb.w	r1, [r8]
 8001eb8:	2203      	movs	r2, #3
 8001eba:	4628      	mov	r0, r5
 8001ebc:	f7fe f990 	bl	80001e0 <memchr>
 8001ec0:	b140      	cbz	r0, 8001ed4 <_vfiprintf_r+0x170>
 8001ec2:	2340      	movs	r3, #64	; 0x40
 8001ec4:	1b40      	subs	r0, r0, r5
 8001ec6:	fa03 f000 	lsl.w	r0, r3, r0
 8001eca:	9b04      	ldr	r3, [sp, #16]
 8001ecc:	4303      	orrs	r3, r0
 8001ece:	f108 0801 	add.w	r8, r8, #1
 8001ed2:	9304      	str	r3, [sp, #16]
 8001ed4:	f898 1000 	ldrb.w	r1, [r8]
 8001ed8:	482a      	ldr	r0, [pc, #168]	; (8001f84 <_vfiprintf_r+0x220>)
 8001eda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001ede:	2206      	movs	r2, #6
 8001ee0:	f108 0701 	add.w	r7, r8, #1
 8001ee4:	f7fe f97c 	bl	80001e0 <memchr>
 8001ee8:	2800      	cmp	r0, #0
 8001eea:	d037      	beq.n	8001f5c <_vfiprintf_r+0x1f8>
 8001eec:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <_vfiprintf_r+0x224>)
 8001eee:	bb1b      	cbnz	r3, 8001f38 <_vfiprintf_r+0x1d4>
 8001ef0:	9b03      	ldr	r3, [sp, #12]
 8001ef2:	3307      	adds	r3, #7
 8001ef4:	f023 0307 	bic.w	r3, r3, #7
 8001ef8:	3308      	adds	r3, #8
 8001efa:	9303      	str	r3, [sp, #12]
 8001efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001efe:	444b      	add	r3, r9
 8001f00:	9309      	str	r3, [sp, #36]	; 0x24
 8001f02:	e750      	b.n	8001da6 <_vfiprintf_r+0x42>
 8001f04:	fb05 3202 	mla	r2, r5, r2, r3
 8001f08:	2001      	movs	r0, #1
 8001f0a:	4688      	mov	r8, r1
 8001f0c:	e78a      	b.n	8001e24 <_vfiprintf_r+0xc0>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f108 0801 	add.w	r8, r8, #1
 8001f14:	9305      	str	r3, [sp, #20]
 8001f16:	4619      	mov	r1, r3
 8001f18:	250a      	movs	r5, #10
 8001f1a:	4640      	mov	r0, r8
 8001f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f20:	3a30      	subs	r2, #48	; 0x30
 8001f22:	2a09      	cmp	r2, #9
 8001f24:	d903      	bls.n	8001f2e <_vfiprintf_r+0x1ca>
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0c3      	beq.n	8001eb2 <_vfiprintf_r+0x14e>
 8001f2a:	9105      	str	r1, [sp, #20]
 8001f2c:	e7c1      	b.n	8001eb2 <_vfiprintf_r+0x14e>
 8001f2e:	fb05 2101 	mla	r1, r5, r1, r2
 8001f32:	2301      	movs	r3, #1
 8001f34:	4680      	mov	r8, r0
 8001f36:	e7f0      	b.n	8001f1a <_vfiprintf_r+0x1b6>
 8001f38:	ab03      	add	r3, sp, #12
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	4622      	mov	r2, r4
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <_vfiprintf_r+0x228>)
 8001f40:	a904      	add	r1, sp, #16
 8001f42:	4630      	mov	r0, r6
 8001f44:	f3af 8000 	nop.w
 8001f48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001f4c:	4681      	mov	r9, r0
 8001f4e:	d1d5      	bne.n	8001efc <_vfiprintf_r+0x198>
 8001f50:	89a3      	ldrh	r3, [r4, #12]
 8001f52:	065b      	lsls	r3, r3, #25
 8001f54:	f53f af7e 	bmi.w	8001e54 <_vfiprintf_r+0xf0>
 8001f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001f5a:	e77d      	b.n	8001e58 <_vfiprintf_r+0xf4>
 8001f5c:	ab03      	add	r3, sp, #12
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	4622      	mov	r2, r4
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <_vfiprintf_r+0x228>)
 8001f64:	a904      	add	r1, sp, #16
 8001f66:	4630      	mov	r0, r6
 8001f68:	f000 f888 	bl	800207c <_printf_i>
 8001f6c:	e7ec      	b.n	8001f48 <_vfiprintf_r+0x1e4>
 8001f6e:	bf00      	nop
 8001f70:	08002a48 	.word	0x08002a48
 8001f74:	08002a88 	.word	0x08002a88
 8001f78:	08002a68 	.word	0x08002a68
 8001f7c:	08002a28 	.word	0x08002a28
 8001f80:	08002a8e 	.word	0x08002a8e
 8001f84:	08002a92 	.word	0x08002a92
 8001f88:	00000000 	.word	0x00000000
 8001f8c:	08001d3f 	.word	0x08001d3f

08001f90 <_printf_common>:
 8001f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f94:	4691      	mov	r9, r2
 8001f96:	461f      	mov	r7, r3
 8001f98:	688a      	ldr	r2, [r1, #8]
 8001f9a:	690b      	ldr	r3, [r1, #16]
 8001f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	bfb8      	it	lt
 8001fa4:	4613      	movlt	r3, r2
 8001fa6:	f8c9 3000 	str.w	r3, [r9]
 8001faa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001fae:	4606      	mov	r6, r0
 8001fb0:	460c      	mov	r4, r1
 8001fb2:	b112      	cbz	r2, 8001fba <_printf_common+0x2a>
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	f8c9 3000 	str.w	r3, [r9]
 8001fba:	6823      	ldr	r3, [r4, #0]
 8001fbc:	0699      	lsls	r1, r3, #26
 8001fbe:	bf42      	ittt	mi
 8001fc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001fc4:	3302      	addmi	r3, #2
 8001fc6:	f8c9 3000 	strmi.w	r3, [r9]
 8001fca:	6825      	ldr	r5, [r4, #0]
 8001fcc:	f015 0506 	ands.w	r5, r5, #6
 8001fd0:	d107      	bne.n	8001fe2 <_printf_common+0x52>
 8001fd2:	f104 0a19 	add.w	sl, r4, #25
 8001fd6:	68e3      	ldr	r3, [r4, #12]
 8001fd8:	f8d9 2000 	ldr.w	r2, [r9]
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	42ab      	cmp	r3, r5
 8001fe0:	dc28      	bgt.n	8002034 <_printf_common+0xa4>
 8001fe2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001fe6:	6822      	ldr	r2, [r4, #0]
 8001fe8:	3300      	adds	r3, #0
 8001fea:	bf18      	it	ne
 8001fec:	2301      	movne	r3, #1
 8001fee:	0692      	lsls	r2, r2, #26
 8001ff0:	d42d      	bmi.n	800204e <_printf_common+0xbe>
 8001ff2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ff6:	4639      	mov	r1, r7
 8001ff8:	4630      	mov	r0, r6
 8001ffa:	47c0      	blx	r8
 8001ffc:	3001      	adds	r0, #1
 8001ffe:	d020      	beq.n	8002042 <_printf_common+0xb2>
 8002000:	6823      	ldr	r3, [r4, #0]
 8002002:	68e5      	ldr	r5, [r4, #12]
 8002004:	f8d9 2000 	ldr.w	r2, [r9]
 8002008:	f003 0306 	and.w	r3, r3, #6
 800200c:	2b04      	cmp	r3, #4
 800200e:	bf08      	it	eq
 8002010:	1aad      	subeq	r5, r5, r2
 8002012:	68a3      	ldr	r3, [r4, #8]
 8002014:	6922      	ldr	r2, [r4, #16]
 8002016:	bf0c      	ite	eq
 8002018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800201c:	2500      	movne	r5, #0
 800201e:	4293      	cmp	r3, r2
 8002020:	bfc4      	itt	gt
 8002022:	1a9b      	subgt	r3, r3, r2
 8002024:	18ed      	addgt	r5, r5, r3
 8002026:	f04f 0900 	mov.w	r9, #0
 800202a:	341a      	adds	r4, #26
 800202c:	454d      	cmp	r5, r9
 800202e:	d11a      	bne.n	8002066 <_printf_common+0xd6>
 8002030:	2000      	movs	r0, #0
 8002032:	e008      	b.n	8002046 <_printf_common+0xb6>
 8002034:	2301      	movs	r3, #1
 8002036:	4652      	mov	r2, sl
 8002038:	4639      	mov	r1, r7
 800203a:	4630      	mov	r0, r6
 800203c:	47c0      	blx	r8
 800203e:	3001      	adds	r0, #1
 8002040:	d103      	bne.n	800204a <_printf_common+0xba>
 8002042:	f04f 30ff 	mov.w	r0, #4294967295
 8002046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800204a:	3501      	adds	r5, #1
 800204c:	e7c3      	b.n	8001fd6 <_printf_common+0x46>
 800204e:	18e1      	adds	r1, r4, r3
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	2030      	movs	r0, #48	; 0x30
 8002054:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002058:	4422      	add	r2, r4
 800205a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800205e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002062:	3302      	adds	r3, #2
 8002064:	e7c5      	b.n	8001ff2 <_printf_common+0x62>
 8002066:	2301      	movs	r3, #1
 8002068:	4622      	mov	r2, r4
 800206a:	4639      	mov	r1, r7
 800206c:	4630      	mov	r0, r6
 800206e:	47c0      	blx	r8
 8002070:	3001      	adds	r0, #1
 8002072:	d0e6      	beq.n	8002042 <_printf_common+0xb2>
 8002074:	f109 0901 	add.w	r9, r9, #1
 8002078:	e7d8      	b.n	800202c <_printf_common+0x9c>
	...

0800207c <_printf_i>:
 800207c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002080:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002084:	460c      	mov	r4, r1
 8002086:	7e09      	ldrb	r1, [r1, #24]
 8002088:	b085      	sub	sp, #20
 800208a:	296e      	cmp	r1, #110	; 0x6e
 800208c:	4617      	mov	r7, r2
 800208e:	4606      	mov	r6, r0
 8002090:	4698      	mov	r8, r3
 8002092:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002094:	f000 80b3 	beq.w	80021fe <_printf_i+0x182>
 8002098:	d822      	bhi.n	80020e0 <_printf_i+0x64>
 800209a:	2963      	cmp	r1, #99	; 0x63
 800209c:	d036      	beq.n	800210c <_printf_i+0x90>
 800209e:	d80a      	bhi.n	80020b6 <_printf_i+0x3a>
 80020a0:	2900      	cmp	r1, #0
 80020a2:	f000 80b9 	beq.w	8002218 <_printf_i+0x19c>
 80020a6:	2958      	cmp	r1, #88	; 0x58
 80020a8:	f000 8083 	beq.w	80021b2 <_printf_i+0x136>
 80020ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80020b4:	e032      	b.n	800211c <_printf_i+0xa0>
 80020b6:	2964      	cmp	r1, #100	; 0x64
 80020b8:	d001      	beq.n	80020be <_printf_i+0x42>
 80020ba:	2969      	cmp	r1, #105	; 0x69
 80020bc:	d1f6      	bne.n	80020ac <_printf_i+0x30>
 80020be:	6820      	ldr	r0, [r4, #0]
 80020c0:	6813      	ldr	r3, [r2, #0]
 80020c2:	0605      	lsls	r5, r0, #24
 80020c4:	f103 0104 	add.w	r1, r3, #4
 80020c8:	d52a      	bpl.n	8002120 <_printf_i+0xa4>
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6011      	str	r1, [r2, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	da03      	bge.n	80020da <_printf_i+0x5e>
 80020d2:	222d      	movs	r2, #45	; 0x2d
 80020d4:	425b      	negs	r3, r3
 80020d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80020da:	486f      	ldr	r0, [pc, #444]	; (8002298 <_printf_i+0x21c>)
 80020dc:	220a      	movs	r2, #10
 80020de:	e039      	b.n	8002154 <_printf_i+0xd8>
 80020e0:	2973      	cmp	r1, #115	; 0x73
 80020e2:	f000 809d 	beq.w	8002220 <_printf_i+0x1a4>
 80020e6:	d808      	bhi.n	80020fa <_printf_i+0x7e>
 80020e8:	296f      	cmp	r1, #111	; 0x6f
 80020ea:	d020      	beq.n	800212e <_printf_i+0xb2>
 80020ec:	2970      	cmp	r1, #112	; 0x70
 80020ee:	d1dd      	bne.n	80020ac <_printf_i+0x30>
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	f043 0320 	orr.w	r3, r3, #32
 80020f6:	6023      	str	r3, [r4, #0]
 80020f8:	e003      	b.n	8002102 <_printf_i+0x86>
 80020fa:	2975      	cmp	r1, #117	; 0x75
 80020fc:	d017      	beq.n	800212e <_printf_i+0xb2>
 80020fe:	2978      	cmp	r1, #120	; 0x78
 8002100:	d1d4      	bne.n	80020ac <_printf_i+0x30>
 8002102:	2378      	movs	r3, #120	; 0x78
 8002104:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002108:	4864      	ldr	r0, [pc, #400]	; (800229c <_printf_i+0x220>)
 800210a:	e055      	b.n	80021b8 <_printf_i+0x13c>
 800210c:	6813      	ldr	r3, [r2, #0]
 800210e:	1d19      	adds	r1, r3, #4
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6011      	str	r1, [r2, #0]
 8002114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800211c:	2301      	movs	r3, #1
 800211e:	e08c      	b.n	800223a <_printf_i+0x1be>
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6011      	str	r1, [r2, #0]
 8002124:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002128:	bf18      	it	ne
 800212a:	b21b      	sxthne	r3, r3
 800212c:	e7cf      	b.n	80020ce <_printf_i+0x52>
 800212e:	6813      	ldr	r3, [r2, #0]
 8002130:	6825      	ldr	r5, [r4, #0]
 8002132:	1d18      	adds	r0, r3, #4
 8002134:	6010      	str	r0, [r2, #0]
 8002136:	0628      	lsls	r0, r5, #24
 8002138:	d501      	bpl.n	800213e <_printf_i+0xc2>
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	e002      	b.n	8002144 <_printf_i+0xc8>
 800213e:	0668      	lsls	r0, r5, #25
 8002140:	d5fb      	bpl.n	800213a <_printf_i+0xbe>
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	4854      	ldr	r0, [pc, #336]	; (8002298 <_printf_i+0x21c>)
 8002146:	296f      	cmp	r1, #111	; 0x6f
 8002148:	bf14      	ite	ne
 800214a:	220a      	movne	r2, #10
 800214c:	2208      	moveq	r2, #8
 800214e:	2100      	movs	r1, #0
 8002150:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002154:	6865      	ldr	r5, [r4, #4]
 8002156:	60a5      	str	r5, [r4, #8]
 8002158:	2d00      	cmp	r5, #0
 800215a:	f2c0 8095 	blt.w	8002288 <_printf_i+0x20c>
 800215e:	6821      	ldr	r1, [r4, #0]
 8002160:	f021 0104 	bic.w	r1, r1, #4
 8002164:	6021      	str	r1, [r4, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d13d      	bne.n	80021e6 <_printf_i+0x16a>
 800216a:	2d00      	cmp	r5, #0
 800216c:	f040 808e 	bne.w	800228c <_printf_i+0x210>
 8002170:	4665      	mov	r5, ip
 8002172:	2a08      	cmp	r2, #8
 8002174:	d10b      	bne.n	800218e <_printf_i+0x112>
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	07db      	lsls	r3, r3, #31
 800217a:	d508      	bpl.n	800218e <_printf_i+0x112>
 800217c:	6923      	ldr	r3, [r4, #16]
 800217e:	6862      	ldr	r2, [r4, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	bfde      	ittt	le
 8002184:	2330      	movle	r3, #48	; 0x30
 8002186:	f805 3c01 	strble.w	r3, [r5, #-1]
 800218a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800218e:	ebac 0305 	sub.w	r3, ip, r5
 8002192:	6123      	str	r3, [r4, #16]
 8002194:	f8cd 8000 	str.w	r8, [sp]
 8002198:	463b      	mov	r3, r7
 800219a:	aa03      	add	r2, sp, #12
 800219c:	4621      	mov	r1, r4
 800219e:	4630      	mov	r0, r6
 80021a0:	f7ff fef6 	bl	8001f90 <_printf_common>
 80021a4:	3001      	adds	r0, #1
 80021a6:	d14d      	bne.n	8002244 <_printf_i+0x1c8>
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ac:	b005      	add	sp, #20
 80021ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80021b2:	4839      	ldr	r0, [pc, #228]	; (8002298 <_printf_i+0x21c>)
 80021b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80021b8:	6813      	ldr	r3, [r2, #0]
 80021ba:	6821      	ldr	r1, [r4, #0]
 80021bc:	1d1d      	adds	r5, r3, #4
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6015      	str	r5, [r2, #0]
 80021c2:	060a      	lsls	r2, r1, #24
 80021c4:	d50b      	bpl.n	80021de <_printf_i+0x162>
 80021c6:	07ca      	lsls	r2, r1, #31
 80021c8:	bf44      	itt	mi
 80021ca:	f041 0120 	orrmi.w	r1, r1, #32
 80021ce:	6021      	strmi	r1, [r4, #0]
 80021d0:	b91b      	cbnz	r3, 80021da <_printf_i+0x15e>
 80021d2:	6822      	ldr	r2, [r4, #0]
 80021d4:	f022 0220 	bic.w	r2, r2, #32
 80021d8:	6022      	str	r2, [r4, #0]
 80021da:	2210      	movs	r2, #16
 80021dc:	e7b7      	b.n	800214e <_printf_i+0xd2>
 80021de:	064d      	lsls	r5, r1, #25
 80021e0:	bf48      	it	mi
 80021e2:	b29b      	uxthmi	r3, r3
 80021e4:	e7ef      	b.n	80021c6 <_printf_i+0x14a>
 80021e6:	4665      	mov	r5, ip
 80021e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80021ec:	fb02 3311 	mls	r3, r2, r1, r3
 80021f0:	5cc3      	ldrb	r3, [r0, r3]
 80021f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80021f6:	460b      	mov	r3, r1
 80021f8:	2900      	cmp	r1, #0
 80021fa:	d1f5      	bne.n	80021e8 <_printf_i+0x16c>
 80021fc:	e7b9      	b.n	8002172 <_printf_i+0xf6>
 80021fe:	6813      	ldr	r3, [r2, #0]
 8002200:	6825      	ldr	r5, [r4, #0]
 8002202:	6961      	ldr	r1, [r4, #20]
 8002204:	1d18      	adds	r0, r3, #4
 8002206:	6010      	str	r0, [r2, #0]
 8002208:	0628      	lsls	r0, r5, #24
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	d501      	bpl.n	8002212 <_printf_i+0x196>
 800220e:	6019      	str	r1, [r3, #0]
 8002210:	e002      	b.n	8002218 <_printf_i+0x19c>
 8002212:	066a      	lsls	r2, r5, #25
 8002214:	d5fb      	bpl.n	800220e <_printf_i+0x192>
 8002216:	8019      	strh	r1, [r3, #0]
 8002218:	2300      	movs	r3, #0
 800221a:	6123      	str	r3, [r4, #16]
 800221c:	4665      	mov	r5, ip
 800221e:	e7b9      	b.n	8002194 <_printf_i+0x118>
 8002220:	6813      	ldr	r3, [r2, #0]
 8002222:	1d19      	adds	r1, r3, #4
 8002224:	6011      	str	r1, [r2, #0]
 8002226:	681d      	ldr	r5, [r3, #0]
 8002228:	6862      	ldr	r2, [r4, #4]
 800222a:	2100      	movs	r1, #0
 800222c:	4628      	mov	r0, r5
 800222e:	f7fd ffd7 	bl	80001e0 <memchr>
 8002232:	b108      	cbz	r0, 8002238 <_printf_i+0x1bc>
 8002234:	1b40      	subs	r0, r0, r5
 8002236:	6060      	str	r0, [r4, #4]
 8002238:	6863      	ldr	r3, [r4, #4]
 800223a:	6123      	str	r3, [r4, #16]
 800223c:	2300      	movs	r3, #0
 800223e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002242:	e7a7      	b.n	8002194 <_printf_i+0x118>
 8002244:	6923      	ldr	r3, [r4, #16]
 8002246:	462a      	mov	r2, r5
 8002248:	4639      	mov	r1, r7
 800224a:	4630      	mov	r0, r6
 800224c:	47c0      	blx	r8
 800224e:	3001      	adds	r0, #1
 8002250:	d0aa      	beq.n	80021a8 <_printf_i+0x12c>
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	079b      	lsls	r3, r3, #30
 8002256:	d413      	bmi.n	8002280 <_printf_i+0x204>
 8002258:	68e0      	ldr	r0, [r4, #12]
 800225a:	9b03      	ldr	r3, [sp, #12]
 800225c:	4298      	cmp	r0, r3
 800225e:	bfb8      	it	lt
 8002260:	4618      	movlt	r0, r3
 8002262:	e7a3      	b.n	80021ac <_printf_i+0x130>
 8002264:	2301      	movs	r3, #1
 8002266:	464a      	mov	r2, r9
 8002268:	4639      	mov	r1, r7
 800226a:	4630      	mov	r0, r6
 800226c:	47c0      	blx	r8
 800226e:	3001      	adds	r0, #1
 8002270:	d09a      	beq.n	80021a8 <_printf_i+0x12c>
 8002272:	3501      	adds	r5, #1
 8002274:	68e3      	ldr	r3, [r4, #12]
 8002276:	9a03      	ldr	r2, [sp, #12]
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	42ab      	cmp	r3, r5
 800227c:	dcf2      	bgt.n	8002264 <_printf_i+0x1e8>
 800227e:	e7eb      	b.n	8002258 <_printf_i+0x1dc>
 8002280:	2500      	movs	r5, #0
 8002282:	f104 0919 	add.w	r9, r4, #25
 8002286:	e7f5      	b.n	8002274 <_printf_i+0x1f8>
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1ac      	bne.n	80021e6 <_printf_i+0x16a>
 800228c:	7803      	ldrb	r3, [r0, #0]
 800228e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002292:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002296:	e76c      	b.n	8002172 <_printf_i+0xf6>
 8002298:	08002a99 	.word	0x08002a99
 800229c:	08002aaa 	.word	0x08002aaa

080022a0 <_sbrk_r>:
 80022a0:	b538      	push	{r3, r4, r5, lr}
 80022a2:	4c06      	ldr	r4, [pc, #24]	; (80022bc <_sbrk_r+0x1c>)
 80022a4:	2300      	movs	r3, #0
 80022a6:	4605      	mov	r5, r0
 80022a8:	4608      	mov	r0, r1
 80022aa:	6023      	str	r3, [r4, #0]
 80022ac:	f000 f9bc 	bl	8002628 <_sbrk>
 80022b0:	1c43      	adds	r3, r0, #1
 80022b2:	d102      	bne.n	80022ba <_sbrk_r+0x1a>
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	b103      	cbz	r3, 80022ba <_sbrk_r+0x1a>
 80022b8:	602b      	str	r3, [r5, #0]
 80022ba:	bd38      	pop	{r3, r4, r5, pc}
 80022bc:	200001a8 	.word	0x200001a8

080022c0 <__sread>:
 80022c0:	b510      	push	{r4, lr}
 80022c2:	460c      	mov	r4, r1
 80022c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022c8:	f000 f896 	bl	80023f8 <_read_r>
 80022cc:	2800      	cmp	r0, #0
 80022ce:	bfab      	itete	ge
 80022d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80022d2:	89a3      	ldrhlt	r3, [r4, #12]
 80022d4:	181b      	addge	r3, r3, r0
 80022d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80022da:	bfac      	ite	ge
 80022dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80022de:	81a3      	strhlt	r3, [r4, #12]
 80022e0:	bd10      	pop	{r4, pc}

080022e2 <__swrite>:
 80022e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022e6:	461f      	mov	r7, r3
 80022e8:	898b      	ldrh	r3, [r1, #12]
 80022ea:	05db      	lsls	r3, r3, #23
 80022ec:	4605      	mov	r5, r0
 80022ee:	460c      	mov	r4, r1
 80022f0:	4616      	mov	r6, r2
 80022f2:	d505      	bpl.n	8002300 <__swrite+0x1e>
 80022f4:	2302      	movs	r3, #2
 80022f6:	2200      	movs	r2, #0
 80022f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022fc:	f000 f868 	bl	80023d0 <_lseek_r>
 8002300:	89a3      	ldrh	r3, [r4, #12]
 8002302:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002306:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800230a:	81a3      	strh	r3, [r4, #12]
 800230c:	4632      	mov	r2, r6
 800230e:	463b      	mov	r3, r7
 8002310:	4628      	mov	r0, r5
 8002312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002316:	f000 b817 	b.w	8002348 <_write_r>

0800231a <__sseek>:
 800231a:	b510      	push	{r4, lr}
 800231c:	460c      	mov	r4, r1
 800231e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002322:	f000 f855 	bl	80023d0 <_lseek_r>
 8002326:	1c43      	adds	r3, r0, #1
 8002328:	89a3      	ldrh	r3, [r4, #12]
 800232a:	bf15      	itete	ne
 800232c:	6560      	strne	r0, [r4, #84]	; 0x54
 800232e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002332:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002336:	81a3      	strheq	r3, [r4, #12]
 8002338:	bf18      	it	ne
 800233a:	81a3      	strhne	r3, [r4, #12]
 800233c:	bd10      	pop	{r4, pc}

0800233e <__sclose>:
 800233e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002342:	f000 b813 	b.w	800236c <_close_r>
	...

08002348 <_write_r>:
 8002348:	b538      	push	{r3, r4, r5, lr}
 800234a:	4c07      	ldr	r4, [pc, #28]	; (8002368 <_write_r+0x20>)
 800234c:	4605      	mov	r5, r0
 800234e:	4608      	mov	r0, r1
 8002350:	4611      	mov	r1, r2
 8002352:	2200      	movs	r2, #0
 8002354:	6022      	str	r2, [r4, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	f000 f911 	bl	800257e <_write>
 800235c:	1c43      	adds	r3, r0, #1
 800235e:	d102      	bne.n	8002366 <_write_r+0x1e>
 8002360:	6823      	ldr	r3, [r4, #0]
 8002362:	b103      	cbz	r3, 8002366 <_write_r+0x1e>
 8002364:	602b      	str	r3, [r5, #0]
 8002366:	bd38      	pop	{r3, r4, r5, pc}
 8002368:	200001a8 	.word	0x200001a8

0800236c <_close_r>:
 800236c:	b538      	push	{r3, r4, r5, lr}
 800236e:	4c06      	ldr	r4, [pc, #24]	; (8002388 <_close_r+0x1c>)
 8002370:	2300      	movs	r3, #0
 8002372:	4605      	mov	r5, r0
 8002374:	4608      	mov	r0, r1
 8002376:	6023      	str	r3, [r4, #0]
 8002378:	f000 f930 	bl	80025dc <_close>
 800237c:	1c43      	adds	r3, r0, #1
 800237e:	d102      	bne.n	8002386 <_close_r+0x1a>
 8002380:	6823      	ldr	r3, [r4, #0]
 8002382:	b103      	cbz	r3, 8002386 <_close_r+0x1a>
 8002384:	602b      	str	r3, [r5, #0]
 8002386:	bd38      	pop	{r3, r4, r5, pc}
 8002388:	200001a8 	.word	0x200001a8

0800238c <_fstat_r>:
 800238c:	b538      	push	{r3, r4, r5, lr}
 800238e:	4c07      	ldr	r4, [pc, #28]	; (80023ac <_fstat_r+0x20>)
 8002390:	2300      	movs	r3, #0
 8002392:	4605      	mov	r5, r0
 8002394:	4608      	mov	r0, r1
 8002396:	4611      	mov	r1, r2
 8002398:	6023      	str	r3, [r4, #0]
 800239a:	f000 f98a 	bl	80026b2 <_fstat>
 800239e:	1c43      	adds	r3, r0, #1
 80023a0:	d102      	bne.n	80023a8 <_fstat_r+0x1c>
 80023a2:	6823      	ldr	r3, [r4, #0]
 80023a4:	b103      	cbz	r3, 80023a8 <_fstat_r+0x1c>
 80023a6:	602b      	str	r3, [r5, #0]
 80023a8:	bd38      	pop	{r3, r4, r5, pc}
 80023aa:	bf00      	nop
 80023ac:	200001a8 	.word	0x200001a8

080023b0 <_isatty_r>:
 80023b0:	b538      	push	{r3, r4, r5, lr}
 80023b2:	4c06      	ldr	r4, [pc, #24]	; (80023cc <_isatty_r+0x1c>)
 80023b4:	2300      	movs	r3, #0
 80023b6:	4605      	mov	r5, r0
 80023b8:	4608      	mov	r0, r1
 80023ba:	6023      	str	r3, [r4, #0]
 80023bc:	f000 fade 	bl	800297c <_isatty>
 80023c0:	1c43      	adds	r3, r0, #1
 80023c2:	d102      	bne.n	80023ca <_isatty_r+0x1a>
 80023c4:	6823      	ldr	r3, [r4, #0]
 80023c6:	b103      	cbz	r3, 80023ca <_isatty_r+0x1a>
 80023c8:	602b      	str	r3, [r5, #0]
 80023ca:	bd38      	pop	{r3, r4, r5, pc}
 80023cc:	200001a8 	.word	0x200001a8

080023d0 <_lseek_r>:
 80023d0:	b538      	push	{r3, r4, r5, lr}
 80023d2:	4c07      	ldr	r4, [pc, #28]	; (80023f0 <_lseek_r+0x20>)
 80023d4:	4605      	mov	r5, r0
 80023d6:	4608      	mov	r0, r1
 80023d8:	4611      	mov	r1, r2
 80023da:	2200      	movs	r2, #0
 80023dc:	6022      	str	r2, [r4, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	f000 f8bb 	bl	800255a <_lseek>
 80023e4:	1c43      	adds	r3, r0, #1
 80023e6:	d102      	bne.n	80023ee <_lseek_r+0x1e>
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	b103      	cbz	r3, 80023ee <_lseek_r+0x1e>
 80023ec:	602b      	str	r3, [r5, #0]
 80023ee:	bd38      	pop	{r3, r4, r5, pc}
 80023f0:	200001a8 	.word	0x200001a8

080023f4 <__malloc_lock>:
 80023f4:	4770      	bx	lr

080023f6 <__malloc_unlock>:
 80023f6:	4770      	bx	lr

080023f8 <_read_r>:
 80023f8:	b538      	push	{r3, r4, r5, lr}
 80023fa:	4c07      	ldr	r4, [pc, #28]	; (8002418 <_read_r+0x20>)
 80023fc:	4605      	mov	r5, r0
 80023fe:	4608      	mov	r0, r1
 8002400:	4611      	mov	r1, r2
 8002402:	2200      	movs	r2, #0
 8002404:	6022      	str	r2, [r4, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	f000 f850 	bl	80024ac <_read>
 800240c:	1c43      	adds	r3, r0, #1
 800240e:	d102      	bne.n	8002416 <_read_r+0x1e>
 8002410:	6823      	ldr	r3, [r4, #0]
 8002412:	b103      	cbz	r3, 8002416 <_read_r+0x1e>
 8002414:	602b      	str	r3, [r5, #0]
 8002416:	bd38      	pop	{r3, r4, r5, pc}
 8002418:	200001a8 	.word	0x200001a8

0800241c <findslot>:
 800241c:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <findslot+0x2c>)
 800241e:	b510      	push	{r4, lr}
 8002420:	4604      	mov	r4, r0
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	b118      	cbz	r0, 800242e <findslot+0x12>
 8002426:	6983      	ldr	r3, [r0, #24]
 8002428:	b90b      	cbnz	r3, 800242e <findslot+0x12>
 800242a:	f7ff fadb 	bl	80019e4 <__sinit>
 800242e:	2c13      	cmp	r4, #19
 8002430:	d807      	bhi.n	8002442 <findslot+0x26>
 8002432:	4806      	ldr	r0, [pc, #24]	; (800244c <findslot+0x30>)
 8002434:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8002438:	3301      	adds	r3, #1
 800243a:	d002      	beq.n	8002442 <findslot+0x26>
 800243c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002440:	bd10      	pop	{r4, pc}
 8002442:	2000      	movs	r0, #0
 8002444:	e7fc      	b.n	8002440 <findslot+0x24>
 8002446:	bf00      	nop
 8002448:	20000018 	.word	0x20000018
 800244c:	200000c0 	.word	0x200000c0

08002450 <checkerror>:
 8002450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002452:	1c43      	adds	r3, r0, #1
 8002454:	4605      	mov	r5, r0
 8002456:	d109      	bne.n	800246c <checkerror+0x1c>
 8002458:	f000 faac 	bl	80029b4 <__errno>
 800245c:	2413      	movs	r4, #19
 800245e:	4606      	mov	r6, r0
 8002460:	2700      	movs	r7, #0
 8002462:	4620      	mov	r0, r4
 8002464:	4639      	mov	r1, r7
 8002466:	beab      	bkpt	0x00ab
 8002468:	4604      	mov	r4, r0
 800246a:	6034      	str	r4, [r6, #0]
 800246c:	4628      	mov	r0, r5
 800246e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002470 <error>:
 8002470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002472:	4605      	mov	r5, r0
 8002474:	f000 fa9e 	bl	80029b4 <__errno>
 8002478:	2413      	movs	r4, #19
 800247a:	4606      	mov	r6, r0
 800247c:	2700      	movs	r7, #0
 800247e:	4620      	mov	r0, r4
 8002480:	4639      	mov	r1, r7
 8002482:	beab      	bkpt	0x00ab
 8002484:	4604      	mov	r4, r0
 8002486:	6034      	str	r4, [r6, #0]
 8002488:	4628      	mov	r0, r5
 800248a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800248c <_swiread>:
 800248c:	b530      	push	{r4, r5, lr}
 800248e:	b085      	sub	sp, #20
 8002490:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002494:	9203      	str	r2, [sp, #12]
 8002496:	2406      	movs	r4, #6
 8002498:	ad01      	add	r5, sp, #4
 800249a:	4620      	mov	r0, r4
 800249c:	4629      	mov	r1, r5
 800249e:	beab      	bkpt	0x00ab
 80024a0:	4604      	mov	r4, r0
 80024a2:	4620      	mov	r0, r4
 80024a4:	f7ff ffd4 	bl	8002450 <checkerror>
 80024a8:	b005      	add	sp, #20
 80024aa:	bd30      	pop	{r4, r5, pc}

080024ac <_read>:
 80024ac:	b570      	push	{r4, r5, r6, lr}
 80024ae:	460e      	mov	r6, r1
 80024b0:	4615      	mov	r5, r2
 80024b2:	f7ff ffb3 	bl	800241c <findslot>
 80024b6:	4604      	mov	r4, r0
 80024b8:	b930      	cbnz	r0, 80024c8 <_read+0x1c>
 80024ba:	f000 fa7b 	bl	80029b4 <__errno>
 80024be:	2309      	movs	r3, #9
 80024c0:	6003      	str	r3, [r0, #0]
 80024c2:	f04f 30ff 	mov.w	r0, #4294967295
 80024c6:	bd70      	pop	{r4, r5, r6, pc}
 80024c8:	462a      	mov	r2, r5
 80024ca:	4631      	mov	r1, r6
 80024cc:	6800      	ldr	r0, [r0, #0]
 80024ce:	f7ff ffdd 	bl	800248c <_swiread>
 80024d2:	1c43      	adds	r3, r0, #1
 80024d4:	bf1f      	itttt	ne
 80024d6:	6863      	ldrne	r3, [r4, #4]
 80024d8:	1a28      	subne	r0, r5, r0
 80024da:	181b      	addne	r3, r3, r0
 80024dc:	6063      	strne	r3, [r4, #4]
 80024de:	e7f2      	b.n	80024c6 <_read+0x1a>

080024e0 <_swilseek>:
 80024e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024e2:	460c      	mov	r4, r1
 80024e4:	4616      	mov	r6, r2
 80024e6:	f7ff ff99 	bl	800241c <findslot>
 80024ea:	4605      	mov	r5, r0
 80024ec:	b940      	cbnz	r0, 8002500 <_swilseek+0x20>
 80024ee:	f000 fa61 	bl	80029b4 <__errno>
 80024f2:	2309      	movs	r3, #9
 80024f4:	6003      	str	r3, [r0, #0]
 80024f6:	f04f 34ff 	mov.w	r4, #4294967295
 80024fa:	4620      	mov	r0, r4
 80024fc:	b003      	add	sp, #12
 80024fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002500:	2e02      	cmp	r6, #2
 8002502:	d903      	bls.n	800250c <_swilseek+0x2c>
 8002504:	f000 fa56 	bl	80029b4 <__errno>
 8002508:	2316      	movs	r3, #22
 800250a:	e7f3      	b.n	80024f4 <_swilseek+0x14>
 800250c:	2e01      	cmp	r6, #1
 800250e:	d112      	bne.n	8002536 <_swilseek+0x56>
 8002510:	6843      	ldr	r3, [r0, #4]
 8002512:	18e4      	adds	r4, r4, r3
 8002514:	d4f6      	bmi.n	8002504 <_swilseek+0x24>
 8002516:	682b      	ldr	r3, [r5, #0]
 8002518:	260a      	movs	r6, #10
 800251a:	e9cd 3400 	strd	r3, r4, [sp]
 800251e:	466f      	mov	r7, sp
 8002520:	4630      	mov	r0, r6
 8002522:	4639      	mov	r1, r7
 8002524:	beab      	bkpt	0x00ab
 8002526:	4606      	mov	r6, r0
 8002528:	4630      	mov	r0, r6
 800252a:	f7ff ff91 	bl	8002450 <checkerror>
 800252e:	2800      	cmp	r0, #0
 8002530:	dbe1      	blt.n	80024f6 <_swilseek+0x16>
 8002532:	606c      	str	r4, [r5, #4]
 8002534:	e7e1      	b.n	80024fa <_swilseek+0x1a>
 8002536:	2e02      	cmp	r6, #2
 8002538:	d1ed      	bne.n	8002516 <_swilseek+0x36>
 800253a:	af02      	add	r7, sp, #8
 800253c:	6803      	ldr	r3, [r0, #0]
 800253e:	f847 3d08 	str.w	r3, [r7, #-8]!
 8002542:	260c      	movs	r6, #12
 8002544:	4630      	mov	r0, r6
 8002546:	4639      	mov	r1, r7
 8002548:	beab      	bkpt	0x00ab
 800254a:	4606      	mov	r6, r0
 800254c:	4630      	mov	r0, r6
 800254e:	f7ff ff7f 	bl	8002450 <checkerror>
 8002552:	1c43      	adds	r3, r0, #1
 8002554:	d0cf      	beq.n	80024f6 <_swilseek+0x16>
 8002556:	4404      	add	r4, r0
 8002558:	e7dd      	b.n	8002516 <_swilseek+0x36>

0800255a <_lseek>:
 800255a:	f7ff bfc1 	b.w	80024e0 <_swilseek>

0800255e <_swiwrite>:
 800255e:	b530      	push	{r4, r5, lr}
 8002560:	b085      	sub	sp, #20
 8002562:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002566:	9203      	str	r2, [sp, #12]
 8002568:	2405      	movs	r4, #5
 800256a:	ad01      	add	r5, sp, #4
 800256c:	4620      	mov	r0, r4
 800256e:	4629      	mov	r1, r5
 8002570:	beab      	bkpt	0x00ab
 8002572:	4604      	mov	r4, r0
 8002574:	4620      	mov	r0, r4
 8002576:	f7ff ff6b 	bl	8002450 <checkerror>
 800257a:	b005      	add	sp, #20
 800257c:	bd30      	pop	{r4, r5, pc}

0800257e <_write>:
 800257e:	b570      	push	{r4, r5, r6, lr}
 8002580:	460e      	mov	r6, r1
 8002582:	4615      	mov	r5, r2
 8002584:	f7ff ff4a 	bl	800241c <findslot>
 8002588:	4604      	mov	r4, r0
 800258a:	b930      	cbnz	r0, 800259a <_write+0x1c>
 800258c:	f000 fa12 	bl	80029b4 <__errno>
 8002590:	2309      	movs	r3, #9
 8002592:	6003      	str	r3, [r0, #0]
 8002594:	f04f 30ff 	mov.w	r0, #4294967295
 8002598:	bd70      	pop	{r4, r5, r6, pc}
 800259a:	462a      	mov	r2, r5
 800259c:	4631      	mov	r1, r6
 800259e:	6800      	ldr	r0, [r0, #0]
 80025a0:	f7ff ffdd 	bl	800255e <_swiwrite>
 80025a4:	1e02      	subs	r2, r0, #0
 80025a6:	dbf5      	blt.n	8002594 <_write+0x16>
 80025a8:	6863      	ldr	r3, [r4, #4]
 80025aa:	1aa8      	subs	r0, r5, r2
 80025ac:	4403      	add	r3, r0
 80025ae:	42aa      	cmp	r2, r5
 80025b0:	6063      	str	r3, [r4, #4]
 80025b2:	d1f1      	bne.n	8002598 <_write+0x1a>
 80025b4:	2000      	movs	r0, #0
 80025b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80025ba:	f7ff bf59 	b.w	8002470 <error>

080025be <_swiclose>:
 80025be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80025c0:	ad02      	add	r5, sp, #8
 80025c2:	2402      	movs	r4, #2
 80025c4:	f845 0d04 	str.w	r0, [r5, #-4]!
 80025c8:	4620      	mov	r0, r4
 80025ca:	4629      	mov	r1, r5
 80025cc:	beab      	bkpt	0x00ab
 80025ce:	4604      	mov	r4, r0
 80025d0:	4620      	mov	r0, r4
 80025d2:	f7ff ff3d 	bl	8002450 <checkerror>
 80025d6:	b003      	add	sp, #12
 80025d8:	bd30      	pop	{r4, r5, pc}
	...

080025dc <_close>:
 80025dc:	b538      	push	{r3, r4, r5, lr}
 80025de:	4605      	mov	r5, r0
 80025e0:	f7ff ff1c 	bl	800241c <findslot>
 80025e4:	4604      	mov	r4, r0
 80025e6:	b930      	cbnz	r0, 80025f6 <_close+0x1a>
 80025e8:	f000 f9e4 	bl	80029b4 <__errno>
 80025ec:	2309      	movs	r3, #9
 80025ee:	6003      	str	r3, [r0, #0]
 80025f0:	f04f 30ff 	mov.w	r0, #4294967295
 80025f4:	bd38      	pop	{r3, r4, r5, pc}
 80025f6:	3d01      	subs	r5, #1
 80025f8:	2d01      	cmp	r5, #1
 80025fa:	d809      	bhi.n	8002610 <_close+0x34>
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <_close+0x48>)
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	429a      	cmp	r2, r3
 8002604:	d104      	bne.n	8002610 <_close+0x34>
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
 800260a:	6003      	str	r3, [r0, #0]
 800260c:	2000      	movs	r0, #0
 800260e:	e7f1      	b.n	80025f4 <_close+0x18>
 8002610:	6820      	ldr	r0, [r4, #0]
 8002612:	f7ff ffd4 	bl	80025be <_swiclose>
 8002616:	2800      	cmp	r0, #0
 8002618:	d1ec      	bne.n	80025f4 <_close+0x18>
 800261a:	f04f 33ff 	mov.w	r3, #4294967295
 800261e:	6023      	str	r3, [r4, #0]
 8002620:	e7e8      	b.n	80025f4 <_close+0x18>
 8002622:	bf00      	nop
 8002624:	200000c0 	.word	0x200000c0

08002628 <_sbrk>:
 8002628:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <_sbrk+0x38>)
 800262a:	6819      	ldr	r1, [r3, #0]
 800262c:	b510      	push	{r4, lr}
 800262e:	4602      	mov	r2, r0
 8002630:	b909      	cbnz	r1, 8002636 <_sbrk+0xe>
 8002632:	490c      	ldr	r1, [pc, #48]	; (8002664 <_sbrk+0x3c>)
 8002634:	6019      	str	r1, [r3, #0]
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	4669      	mov	r1, sp
 800263a:	4402      	add	r2, r0
 800263c:	428a      	cmp	r2, r1
 800263e:	d806      	bhi.n	800264e <_sbrk+0x26>
 8002640:	4909      	ldr	r1, [pc, #36]	; (8002668 <_sbrk+0x40>)
 8002642:	4c0a      	ldr	r4, [pc, #40]	; (800266c <_sbrk+0x44>)
 8002644:	6809      	ldr	r1, [r1, #0]
 8002646:	42a1      	cmp	r1, r4
 8002648:	d008      	beq.n	800265c <_sbrk+0x34>
 800264a:	428a      	cmp	r2, r1
 800264c:	d906      	bls.n	800265c <_sbrk+0x34>
 800264e:	f000 f9b1 	bl	80029b4 <__errno>
 8002652:	230c      	movs	r3, #12
 8002654:	6003      	str	r3, [r0, #0]
 8002656:	f04f 30ff 	mov.w	r0, #4294967295
 800265a:	bd10      	pop	{r4, pc}
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	e7fc      	b.n	800265a <_sbrk+0x32>
 8002660:	200000b0 	.word	0x200000b0
 8002664:	200001b0 	.word	0x200001b0
 8002668:	2000007c 	.word	0x2000007c
 800266c:	cafedead 	.word	0xcafedead

08002670 <_swistat>:
 8002670:	b570      	push	{r4, r5, r6, lr}
 8002672:	460c      	mov	r4, r1
 8002674:	f7ff fed2 	bl	800241c <findslot>
 8002678:	4606      	mov	r6, r0
 800267a:	b930      	cbnz	r0, 800268a <_swistat+0x1a>
 800267c:	f000 f99a 	bl	80029b4 <__errno>
 8002680:	2309      	movs	r3, #9
 8002682:	6003      	str	r3, [r0, #0]
 8002684:	f04f 30ff 	mov.w	r0, #4294967295
 8002688:	bd70      	pop	{r4, r5, r6, pc}
 800268a:	6863      	ldr	r3, [r4, #4]
 800268c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002690:	6063      	str	r3, [r4, #4]
 8002692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002696:	6463      	str	r3, [r4, #68]	; 0x44
 8002698:	250c      	movs	r5, #12
 800269a:	4628      	mov	r0, r5
 800269c:	4631      	mov	r1, r6
 800269e:	beab      	bkpt	0x00ab
 80026a0:	4605      	mov	r5, r0
 80026a2:	4628      	mov	r0, r5
 80026a4:	f7ff fed4 	bl	8002450 <checkerror>
 80026a8:	1c43      	adds	r3, r0, #1
 80026aa:	bf1c      	itt	ne
 80026ac:	6120      	strne	r0, [r4, #16]
 80026ae:	2000      	movne	r0, #0
 80026b0:	e7ea      	b.n	8002688 <_swistat+0x18>

080026b2 <_fstat>:
 80026b2:	460b      	mov	r3, r1
 80026b4:	b510      	push	{r4, lr}
 80026b6:	2100      	movs	r1, #0
 80026b8:	4604      	mov	r4, r0
 80026ba:	2258      	movs	r2, #88	; 0x58
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe ff5d 	bl	800157c <memset>
 80026c2:	4601      	mov	r1, r0
 80026c4:	4620      	mov	r0, r4
 80026c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026ca:	f7ff bfd1 	b.w	8002670 <_swistat>

080026ce <_stat>:
 80026ce:	b538      	push	{r3, r4, r5, lr}
 80026d0:	460d      	mov	r5, r1
 80026d2:	4604      	mov	r4, r0
 80026d4:	2258      	movs	r2, #88	; 0x58
 80026d6:	2100      	movs	r1, #0
 80026d8:	4628      	mov	r0, r5
 80026da:	f7fe ff4f 	bl	800157c <memset>
 80026de:	4620      	mov	r0, r4
 80026e0:	2100      	movs	r1, #0
 80026e2:	f000 f811 	bl	8002708 <_swiopen>
 80026e6:	1c43      	adds	r3, r0, #1
 80026e8:	4604      	mov	r4, r0
 80026ea:	d00b      	beq.n	8002704 <_stat+0x36>
 80026ec:	686b      	ldr	r3, [r5, #4]
 80026ee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80026f2:	606b      	str	r3, [r5, #4]
 80026f4:	4629      	mov	r1, r5
 80026f6:	f7ff ffbb 	bl	8002670 <_swistat>
 80026fa:	4605      	mov	r5, r0
 80026fc:	4620      	mov	r0, r4
 80026fe:	f7ff ff6d 	bl	80025dc <_close>
 8002702:	462c      	mov	r4, r5
 8002704:	4620      	mov	r0, r4
 8002706:	bd38      	pop	{r3, r4, r5, pc}

08002708 <_swiopen>:
 8002708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800270c:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <_swiopen+0xb4>)
 800270e:	b096      	sub	sp, #88	; 0x58
 8002710:	4682      	mov	sl, r0
 8002712:	460e      	mov	r6, r1
 8002714:	2500      	movs	r5, #0
 8002716:	4698      	mov	r8, r3
 8002718:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 800271c:	1c61      	adds	r1, r4, #1
 800271e:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 8002722:	d036      	beq.n	8002792 <_swiopen+0x8a>
 8002724:	3501      	adds	r5, #1
 8002726:	2d14      	cmp	r5, #20
 8002728:	d1f6      	bne.n	8002718 <_swiopen+0x10>
 800272a:	f000 f943 	bl	80029b4 <__errno>
 800272e:	2318      	movs	r3, #24
 8002730:	6003      	str	r3, [r0, #0]
 8002732:	f04f 34ff 	mov.w	r4, #4294967295
 8002736:	e03c      	b.n	80027b2 <_swiopen+0xaa>
 8002738:	f3c6 4400 	ubfx	r4, r6, #16, #1
 800273c:	f240 6301 	movw	r3, #1537	; 0x601
 8002740:	07b2      	lsls	r2, r6, #30
 8002742:	bf48      	it	mi
 8002744:	f044 0402 	orrmi.w	r4, r4, #2
 8002748:	421e      	tst	r6, r3
 800274a:	bf18      	it	ne
 800274c:	f044 0404 	orrne.w	r4, r4, #4
 8002750:	0733      	lsls	r3, r6, #28
 8002752:	bf48      	it	mi
 8002754:	f024 0404 	bicmi.w	r4, r4, #4
 8002758:	4650      	mov	r0, sl
 800275a:	bf48      	it	mi
 800275c:	f044 0408 	orrmi.w	r4, r4, #8
 8002760:	f8cd a000 	str.w	sl, [sp]
 8002764:	f7fd fd8c 	bl	8000280 <strlen>
 8002768:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800276c:	2401      	movs	r4, #1
 800276e:	4620      	mov	r0, r4
 8002770:	4649      	mov	r1, r9
 8002772:	beab      	bkpt	0x00ab
 8002774:	4604      	mov	r4, r0
 8002776:	2c00      	cmp	r4, #0
 8002778:	db06      	blt.n	8002788 <_swiopen+0x80>
 800277a:	4447      	add	r7, r8
 800277c:	2300      	movs	r3, #0
 800277e:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002782:	607b      	str	r3, [r7, #4]
 8002784:	462c      	mov	r4, r5
 8002786:	e014      	b.n	80027b2 <_swiopen+0xaa>
 8002788:	4620      	mov	r0, r4
 800278a:	f7ff fe71 	bl	8002470 <error>
 800278e:	4604      	mov	r4, r0
 8002790:	e00f      	b.n	80027b2 <_swiopen+0xaa>
 8002792:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002796:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800279a:	46e9      	mov	r9, sp
 800279c:	d1cc      	bne.n	8002738 <_swiopen+0x30>
 800279e:	4649      	mov	r1, r9
 80027a0:	4650      	mov	r0, sl
 80027a2:	f7ff ff94 	bl	80026ce <_stat>
 80027a6:	3001      	adds	r0, #1
 80027a8:	d0c6      	beq.n	8002738 <_swiopen+0x30>
 80027aa:	f000 f903 	bl	80029b4 <__errno>
 80027ae:	2311      	movs	r3, #17
 80027b0:	6003      	str	r3, [r0, #0]
 80027b2:	4620      	mov	r0, r4
 80027b4:	b016      	add	sp, #88	; 0x58
 80027b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027ba:	bf00      	nop
 80027bc:	200000c0 	.word	0x200000c0

080027c0 <_get_semihosting_exts>:
 80027c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80027c4:	4607      	mov	r7, r0
 80027c6:	4688      	mov	r8, r1
 80027c8:	4829      	ldr	r0, [pc, #164]	; (8002870 <_get_semihosting_exts+0xb0>)
 80027ca:	2100      	movs	r1, #0
 80027cc:	4615      	mov	r5, r2
 80027ce:	f7ff ff9b 	bl	8002708 <_swiopen>
 80027d2:	462a      	mov	r2, r5
 80027d4:	4604      	mov	r4, r0
 80027d6:	2100      	movs	r1, #0
 80027d8:	4638      	mov	r0, r7
 80027da:	f7fe fecf 	bl	800157c <memset>
 80027de:	1c63      	adds	r3, r4, #1
 80027e0:	d015      	beq.n	800280e <_get_semihosting_exts+0x4e>
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7ff fe1a 	bl	800241c <findslot>
 80027e8:	260c      	movs	r6, #12
 80027ea:	4681      	mov	r9, r0
 80027ec:	4630      	mov	r0, r6
 80027ee:	4649      	mov	r1, r9
 80027f0:	beab      	bkpt	0x00ab
 80027f2:	4606      	mov	r6, r0
 80027f4:	4630      	mov	r0, r6
 80027f6:	f7ff fe2b 	bl	8002450 <checkerror>
 80027fa:	2803      	cmp	r0, #3
 80027fc:	dd02      	ble.n	8002804 <_get_semihosting_exts+0x44>
 80027fe:	3803      	subs	r0, #3
 8002800:	42a8      	cmp	r0, r5
 8002802:	dc08      	bgt.n	8002816 <_get_semihosting_exts+0x56>
 8002804:	4620      	mov	r0, r4
 8002806:	f7ff fee9 	bl	80025dc <_close>
 800280a:	f04f 34ff 	mov.w	r4, #4294967295
 800280e:	4620      	mov	r0, r4
 8002810:	b003      	add	sp, #12
 8002812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002816:	2204      	movs	r2, #4
 8002818:	eb0d 0102 	add.w	r1, sp, r2
 800281c:	4620      	mov	r0, r4
 800281e:	f7ff fe45 	bl	80024ac <_read>
 8002822:	2803      	cmp	r0, #3
 8002824:	ddee      	ble.n	8002804 <_get_semihosting_exts+0x44>
 8002826:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800282a:	2b53      	cmp	r3, #83	; 0x53
 800282c:	d1ea      	bne.n	8002804 <_get_semihosting_exts+0x44>
 800282e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002832:	2b48      	cmp	r3, #72	; 0x48
 8002834:	d1e6      	bne.n	8002804 <_get_semihosting_exts+0x44>
 8002836:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800283a:	2b46      	cmp	r3, #70	; 0x46
 800283c:	d1e2      	bne.n	8002804 <_get_semihosting_exts+0x44>
 800283e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002842:	2b42      	cmp	r3, #66	; 0x42
 8002844:	d1de      	bne.n	8002804 <_get_semihosting_exts+0x44>
 8002846:	2201      	movs	r2, #1
 8002848:	4641      	mov	r1, r8
 800284a:	4620      	mov	r0, r4
 800284c:	f7ff fe48 	bl	80024e0 <_swilseek>
 8002850:	2800      	cmp	r0, #0
 8002852:	dbd7      	blt.n	8002804 <_get_semihosting_exts+0x44>
 8002854:	462a      	mov	r2, r5
 8002856:	4639      	mov	r1, r7
 8002858:	4620      	mov	r0, r4
 800285a:	f7ff fe27 	bl	80024ac <_read>
 800285e:	4605      	mov	r5, r0
 8002860:	4620      	mov	r0, r4
 8002862:	f7ff febb 	bl	80025dc <_close>
 8002866:	4628      	mov	r0, r5
 8002868:	f7ff fdf2 	bl	8002450 <checkerror>
 800286c:	4604      	mov	r4, r0
 800286e:	e7ce      	b.n	800280e <_get_semihosting_exts+0x4e>
 8002870:	08002abb 	.word	0x08002abb

08002874 <initialise_semihosting_exts>:
 8002874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002876:	4d0a      	ldr	r5, [pc, #40]	; (80028a0 <initialise_semihosting_exts+0x2c>)
 8002878:	4c0a      	ldr	r4, [pc, #40]	; (80028a4 <initialise_semihosting_exts+0x30>)
 800287a:	2100      	movs	r1, #0
 800287c:	2201      	movs	r2, #1
 800287e:	a801      	add	r0, sp, #4
 8002880:	6029      	str	r1, [r5, #0]
 8002882:	6022      	str	r2, [r4, #0]
 8002884:	f7ff ff9c 	bl	80027c0 <_get_semihosting_exts>
 8002888:	2800      	cmp	r0, #0
 800288a:	dd07      	ble.n	800289c <initialise_semihosting_exts+0x28>
 800288c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002890:	f003 0201 	and.w	r2, r3, #1
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	602a      	str	r2, [r5, #0]
 800289a:	6023      	str	r3, [r4, #0]
 800289c:	b003      	add	sp, #12
 800289e:	bd30      	pop	{r4, r5, pc}
 80028a0:	20000080 	.word	0x20000080
 80028a4:	20000084 	.word	0x20000084

080028a8 <_has_ext_stdout_stderr>:
 80028a8:	b510      	push	{r4, lr}
 80028aa:	4c04      	ldr	r4, [pc, #16]	; (80028bc <_has_ext_stdout_stderr+0x14>)
 80028ac:	6822      	ldr	r2, [r4, #0]
 80028ae:	2a00      	cmp	r2, #0
 80028b0:	da01      	bge.n	80028b6 <_has_ext_stdout_stderr+0xe>
 80028b2:	f7ff ffdf 	bl	8002874 <initialise_semihosting_exts>
 80028b6:	6820      	ldr	r0, [r4, #0]
 80028b8:	bd10      	pop	{r4, pc}
 80028ba:	bf00      	nop
 80028bc:	20000084 	.word	0x20000084

080028c0 <initialise_monitor_handles>:
 80028c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028c4:	b085      	sub	sp, #20
 80028c6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002978 <initialise_monitor_handles+0xb8>
 80028ca:	f8cd 9004 	str.w	r9, [sp, #4]
 80028ce:	2303      	movs	r3, #3
 80028d0:	2400      	movs	r4, #0
 80028d2:	9303      	str	r3, [sp, #12]
 80028d4:	f10d 0804 	add.w	r8, sp, #4
 80028d8:	9402      	str	r4, [sp, #8]
 80028da:	2501      	movs	r5, #1
 80028dc:	4628      	mov	r0, r5
 80028de:	4641      	mov	r1, r8
 80028e0:	beab      	bkpt	0x00ab
 80028e2:	4605      	mov	r5, r0
 80028e4:	4e20      	ldr	r6, [pc, #128]	; (8002968 <initialise_monitor_handles+0xa8>)
 80028e6:	4a21      	ldr	r2, [pc, #132]	; (800296c <initialise_monitor_handles+0xac>)
 80028e8:	6035      	str	r5, [r6, #0]
 80028ea:	4623      	mov	r3, r4
 80028ec:	f04f 31ff 	mov.w	r1, #4294967295
 80028f0:	4614      	mov	r4, r2
 80028f2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80028f6:	3301      	adds	r3, #1
 80028f8:	2b14      	cmp	r3, #20
 80028fa:	d1fa      	bne.n	80028f2 <initialise_monitor_handles+0x32>
 80028fc:	f7ff ffd4 	bl	80028a8 <_has_ext_stdout_stderr>
 8002900:	4d1b      	ldr	r5, [pc, #108]	; (8002970 <initialise_monitor_handles+0xb0>)
 8002902:	b1d0      	cbz	r0, 800293a <initialise_monitor_handles+0x7a>
 8002904:	f04f 0a03 	mov.w	sl, #3
 8002908:	2304      	movs	r3, #4
 800290a:	f8cd 9004 	str.w	r9, [sp, #4]
 800290e:	2701      	movs	r7, #1
 8002910:	f8cd a00c 	str.w	sl, [sp, #12]
 8002914:	9302      	str	r3, [sp, #8]
 8002916:	4638      	mov	r0, r7
 8002918:	4641      	mov	r1, r8
 800291a:	beab      	bkpt	0x00ab
 800291c:	4683      	mov	fp, r0
 800291e:	4b15      	ldr	r3, [pc, #84]	; (8002974 <initialise_monitor_handles+0xb4>)
 8002920:	f8cd 9004 	str.w	r9, [sp, #4]
 8002924:	f8c3 b000 	str.w	fp, [r3]
 8002928:	2308      	movs	r3, #8
 800292a:	f8cd a00c 	str.w	sl, [sp, #12]
 800292e:	9302      	str	r3, [sp, #8]
 8002930:	4638      	mov	r0, r7
 8002932:	4641      	mov	r1, r8
 8002934:	beab      	bkpt	0x00ab
 8002936:	4607      	mov	r7, r0
 8002938:	602f      	str	r7, [r5, #0]
 800293a:	682b      	ldr	r3, [r5, #0]
 800293c:	3301      	adds	r3, #1
 800293e:	bf02      	ittt	eq
 8002940:	4b0c      	ldreq	r3, [pc, #48]	; (8002974 <initialise_monitor_handles+0xb4>)
 8002942:	681b      	ldreq	r3, [r3, #0]
 8002944:	602b      	streq	r3, [r5, #0]
 8002946:	6833      	ldr	r3, [r6, #0]
 8002948:	6023      	str	r3, [r4, #0]
 800294a:	2600      	movs	r6, #0
 800294c:	6066      	str	r6, [r4, #4]
 800294e:	f7ff ffab 	bl	80028a8 <_has_ext_stdout_stderr>
 8002952:	b130      	cbz	r0, 8002962 <initialise_monitor_handles+0xa2>
 8002954:	4b07      	ldr	r3, [pc, #28]	; (8002974 <initialise_monitor_handles+0xb4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800295c:	682b      	ldr	r3, [r5, #0]
 800295e:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002962:	b005      	add	sp, #20
 8002964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002968:	200000b8 	.word	0x200000b8
 800296c:	200000c0 	.word	0x200000c0
 8002970:	200000b4 	.word	0x200000b4
 8002974:	200000bc 	.word	0x200000bc
 8002978:	08002ad1 	.word	0x08002ad1

0800297c <_isatty>:
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	f7ff fd4d 	bl	800241c <findslot>
 8002982:	2509      	movs	r5, #9
 8002984:	4604      	mov	r4, r0
 8002986:	b920      	cbnz	r0, 8002992 <_isatty+0x16>
 8002988:	f000 f814 	bl	80029b4 <__errno>
 800298c:	6005      	str	r5, [r0, #0]
 800298e:	4620      	mov	r0, r4
 8002990:	bd70      	pop	{r4, r5, r6, pc}
 8002992:	4628      	mov	r0, r5
 8002994:	4621      	mov	r1, r4
 8002996:	beab      	bkpt	0x00ab
 8002998:	4604      	mov	r4, r0
 800299a:	2c01      	cmp	r4, #1
 800299c:	d0f7      	beq.n	800298e <_isatty+0x12>
 800299e:	f000 f809 	bl	80029b4 <__errno>
 80029a2:	2400      	movs	r4, #0
 80029a4:	4606      	mov	r6, r0
 80029a6:	2513      	movs	r5, #19
 80029a8:	4628      	mov	r0, r5
 80029aa:	4621      	mov	r1, r4
 80029ac:	beab      	bkpt	0x00ab
 80029ae:	4605      	mov	r5, r0
 80029b0:	6035      	str	r5, [r6, #0]
 80029b2:	e7ec      	b.n	800298e <_isatty+0x12>

080029b4 <__errno>:
 80029b4:	4b01      	ldr	r3, [pc, #4]	; (80029bc <__errno+0x8>)
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	20000018 	.word	0x20000018

080029c0 <_init>:
 80029c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c2:	bf00      	nop
 80029c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c6:	bc08      	pop	{r3}
 80029c8:	469e      	mov	lr, r3
 80029ca:	4770      	bx	lr

080029cc <_fini>:
 80029cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ce:	bf00      	nop
 80029d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d2:	bc08      	pop	{r3}
 80029d4:	469e      	mov	lr, r3
 80029d6:	4770      	bx	lr
